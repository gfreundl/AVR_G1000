
g1000_left.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000b8a  00000c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  00800064  00800064  00000c22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f8  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a86  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000116a  00000000  00000000  00002ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00003d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070f  00000000  00000000  00003ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aab  00000000  00000000  000044eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004f96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_1>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	05 01       	movw	r0, r10
  56:	09 05       	cpc	r16, r9
  58:	a1 01       	movw	r20, r2
  5a:	05 09       	sbc	r16, r5
  5c:	19 01       	movw	r2, r18
  5e:	29 20       	and	r2, r9
  60:	15 00       	.word	0x0015	; ????
  62:	25 01       	movw	r4, r10
  64:	75 01       	movw	r14, r10
  66:	95 20       	and	r9, r5
  68:	81 02       	muls	r24, r17
  6a:	05 01       	movw	r0, r10
  6c:	09 36       	cpi	r16, 0x69	; 105
  6e:	15 00       	.word	0x0015	; ????
  70:	25 ff       	sbrs	r18, 5
  72:	75 08       	sbc	r7, r5
  74:	95 01       	movw	r18, r10
  76:	81 02       	muls	r24, r17
  78:	c0 09       	Address 0x00000078 is out of bounds.
.word	0xffff	; ????

00000079 <usbDescriptorConfiguration>:
  79:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
  89:	00 00 09 21 01 01 00 01 22 25 00 07 05 81 03 08     ...!...."%......
  99:	00 64                                               .d

0000009b <usbDescriptorDevice>:
  9b:	12 01 10 01 00 00 00 08 c0 16 01 40 00 01 01 02     ...........@....
  ab:	00 01                                               ..

000000ad <usbDescriptorStringDevice>:
  ad:	1a 03 67 00 31 00 30 00 30 00 30 00 5f 00 6c 00     ..g.1.0.0.0._.l.
  bd:	65 00 66 00 74 00 20 00 31 00                       e.f.t. .1.

000000c7 <usbDescriptorStringVendor>:
  c7:	08 03 67 00 66 00 65 00                             ..g.f.e.

000000cf <usbDescriptorString0>:
  cf:	04 03 09 04 00                                      .....

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf e5       	ldi	r28, 0x5F	; 95
  da:	d4 e0       	ldi	r29, 0x04	; 4
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	a0 e6       	ldi	r26, 0x60	; 96
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	ea e8       	ldi	r30, 0x8A	; 138
  e8:	fb e0       	ldi	r31, 0x0B	; 11
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a4 36       	cpi	r26, 0x64	; 100
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	a4 e6       	ldi	r26, 0x64	; 100
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a1 3d       	cpi	r26, 0xD1	; 209
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 80 02 	call	0x500	; 0x500 <main>
 10a:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 112:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 114:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 116:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 118:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 11a:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 11c:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 11e:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 120:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 122:	09 c0       	rjmp	.+18     	; 0x136 <usbCrcLoopEntry>

00000124 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 124:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 126:	82 27       	eor	r24, r18

00000128 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 128:	97 95       	ror	r25
    ror     resCrcL
 12a:	87 95       	ror	r24
    brcs    usbCrcNoXor
 12c:	10 f0       	brcs	.+4      	; 0x132 <usbCrcNoXor>
    eor     resCrcL, polyL
 12e:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 130:	95 27       	eor	r25, r21

00000132 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 132:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 134:	c8 f3       	brcs	.-14     	; 0x128 <usbCrcBitLoop>

00000136 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 136:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 138:	a8 f3       	brcs	.-22     	; 0x124 <usbCrcByteLoop>

0000013a <usbCrcReady>:
usbCrcReady:
    ret
 13a:	08 95       	ret

0000013c <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 13c:	ea df       	rcall	.-44     	; 0x112 <usbCrc16>
    st      ptr+, resCrcL
 13e:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 140:	9d 93       	st	X+, r25
    ret
 142:	08 95       	ret

00000144 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 144:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 146:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 148:	cf 93       	push	r28

0000014a <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 14a:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 14c:	84 9b       	sbis	0x10, 4	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 14e:	e9 f7       	brne	.-6      	; 0x14a <waitForJ>

00000150 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 150:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 152:	09 c0       	rjmp	.+18     	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 154:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 156:	07 c0       	rjmp	.+14     	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 158:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 15a:	05 c0       	rjmp	.+10     	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 15c:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 15e:	03 c0       	rjmp	.+6      	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 160:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 162:	01 c0       	rjmp	.+2      	; 0x166 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 164:	a3 c0       	rjmp	.+326    	; 0x2ac <sofError>

00000166 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 166:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 168:	c0 91 b4 00 	lds	r28, 0x00B4	; 0x8000b4 <usbInputBufOffset>
    clr     YH                  ;1 [5]
 16c:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 16e:	c5 54       	subi	r28, 0x45	; 69
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 170:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 172:	84 9b       	sbis	0x10, 4	; 16
    rjmp    haveTwoBitsK    ;2 [10]
 174:	02 c0       	rjmp	.+4      	; 0x17a <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 176:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 178:	eb cf       	rjmp	.-42     	; 0x150 <waitForK>

0000017a <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 17a:	2f 93       	push	r18
    push    x1              ;2 [12]
 17c:	0f 93       	push	r16
    push    x2              ;2 [14]
 17e:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 180:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
 182:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 184:	04 fb       	bst	r16, 4
    bld     shift, 0        ;1 [20]
 186:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 188:	4f 93       	push	r20
    push    cnt             ;2 [24]
 18a:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 18c:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
 18e:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 190:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 192:	04 fb       	bst	r16, 4
    bld     shift, 1        ;1 [29]
 194:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 196:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 198:	31 c0       	rjmp	.+98     	; 0x1fc <rxbit2>

0000019a <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 19a:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 19c:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 19e:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
 1a0:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 1a2:	28 c0       	rjmp	.+80     	; 0x1f4 <didUnstuff0>

000001a4 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 1a4:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 1a6:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 1a8:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 1aa:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 1ac:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
 1ae:	29 c0       	rjmp	.+82     	; 0x202 <didUnstuff1>

000001b0 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 1b0:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 1b2:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 1b4:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 1b6:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 1b8:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
 1ba:	2b c0       	rjmp	.+86     	; 0x212 <didUnstuff2>

000001bc <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 1bc:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
 1be:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 1c0:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 1c2:	2a c0       	rjmp	.+84     	; 0x218 <didUnstuff3>

000001c4 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 1c4:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 1c6:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
 1c8:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 1ca:	2c c0       	rjmp	.+88     	; 0x224 <didUnstuff4>

000001cc <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 1cc:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 1ce:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
 1d0:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 1d2:	2f c0       	rjmp	.+94     	; 0x232 <didUnstuff5>

000001d4 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 1d4:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 1d6:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
 1d8:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 1da:	32 c0       	rjmp	.+100    	; 0x240 <didUnstuff6>

000001dc <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 1dc:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 1de:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
 1e0:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 1e2:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 1e4:	00 00       	nop
    eor     x2, x1      ;1 [6]
 1e6:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 1e8:	14 fb       	bst	r17, 4
    bld     shift, 0    ;1 [8]
 1ea:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 1ec:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
 1ee:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;1 [11] SE0 check for bit 1
 1f0:	c9 f1       	breq	.+114    	; 0x264 <se0>
    andi    shift, 0xf9 ;1 [12]
 1f2:	29 7f       	andi	r18, 0xF9	; 249

000001f4 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 1f4:	91 f2       	breq	.-92     	; 0x19a <unstuff0>
    eor     x1, x2      ;1 [14]
 1f6:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 1f8:	04 fb       	bst	r16, 4
    bld     shift, 1    ;1 [16]
 1fa:	21 f9       	bld	r18, 1

000001fc <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 1fc:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
 1fe:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 200:	89 f2       	breq	.-94     	; 0x1a4 <unstuff1>

00000202 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 202:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 204:	58 f1       	brcs	.+86     	; 0x25c <overflow>
    eor     x2, x1      ;1 [22]
 206:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 208:	14 fb       	bst	r17, 4
    bld     shift, 2    ;1 [24]
 20a:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 20c:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
 20e:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 210:	79 f2       	breq	.-98     	; 0x1b0 <unstuff2>

00000212 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 212:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 214:	04 fb       	bst	r16, 4
    bld     shift, 3    ;1 [30]
 216:	23 f9       	bld	r18, 3

00000218 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 218:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 21a:	81 f2       	breq	.-96     	; 0x1bc <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 21c:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
 21e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 220:	14 fb       	bst	r17, 4
    bld     shift, 4    ;1 [36]
 222:	24 f9       	bld	r18, 4

00000224 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 224:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 226:	71 f2       	breq	.-100    	; 0x1c4 <unstuff4>
    nop2                ;2 [40]
 228:	00 c0       	rjmp	.+0      	; 0x22a <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 22a:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
 22c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 22e:	04 fb       	bst	r16, 4
    bld     shift, 5    ;1 [44]
 230:	25 f9       	bld	r18, 5

00000232 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 232:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 234:	59 f2       	breq	.-106    	; 0x1cc <unstuff5>
    nop2                ;2 [48]
 236:	00 c0       	rjmp	.+0      	; 0x238 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 238:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
 23a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 23c:	14 fb       	bst	r17, 4
    bld     shift, 6    ;1 [52]
 23e:	26 f9       	bld	r18, 6

00000240 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 240:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 242:	40 f2       	brcs	.-112    	; 0x1d4 <unstuff6>
    nop2                ;2 [56]
 244:	00 c0       	rjmp	.+0      	; 0x246 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 246:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
 248:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 24a:	04 fb       	bst	r16, 4
    bld     shift, 7    ;1 [60]
 24c:	27 f9       	bld	r18, 7

0000024e <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 24e:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 250:	28 f6       	brcc	.-118    	; 0x1dc <rxLoop>

00000252 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 252:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 254:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 256:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
 258:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 25a:	f9 cf       	rjmp	.-14     	; 0x24e <didUnstuff7>

0000025c <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 25c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 25e:	1a bf       	out	0x3a, r17	; 58

00000260 <ignorePacket>:
ignorePacket:
    clr     token
 260:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 262:	19 c0       	rjmp	.+50     	; 0x296 <handleSetupOrOut>

00000264 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 264:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 266:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 268:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 26a:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 26c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 26e:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 270:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 272:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 274:	f9 f0       	breq	.+62     	; 0x2b4 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 276:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 278:	e9 f0       	breq	.+58     	; 0x2b4 <handleData>
    lds     shift, usbDeviceAddr;[17]
 27a:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 27e:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 280:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 282:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 284:	ed cf       	rjmp	.-38     	; 0x260 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 286:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 288:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 28a:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 28c:	41 f1       	breq	.+80     	; 0x2de <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 28e:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 290:	11 f0       	breq	.+4      	; 0x296 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 292:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 294:	29 f7       	brne	.-54     	; 0x260 <ignorePacket>

00000296 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 296:	00 93 b9 00 	sts	0x00B9, r16	; 0x8000b9 <usbCurrentTok>

0000029a <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 29a:	3f 91       	pop	r19
 29c:	4f 91       	pop	r20
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	2f 91       	pop	r18
 2a4:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 2a6:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 2a8:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 2aa:	4f cf       	rjmp	.-354    	; 0x14a <waitForJ>

000002ac <sofError>:
sofError:
    POP_RETI                    ;macro call
 2ac:	cf 91       	pop	r28
 2ae:	cf bf       	out	0x3f, r28	; 63
 2b0:	cf 91       	pop	r28
    reti
 2b2:	18 95       	reti

000002b4 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 2b4:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <usbCurrentTok>
    tst     shift               ;[20]
 2b8:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 2ba:	79 f3       	breq	.-34     	; 0x29a <doReturn>
    lds     x2, usbRxLen        ;[22]
 2bc:	10 91 b7 00 	lds	r17, 0x00B7	; 0x8000b7 <usbRxLen>
    tst     x2                  ;[24]
 2c0:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 2c2:	69 f5       	brne	.+90     	; 0x31e <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 2c4:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 2c6:	6a f1       	brmi	.+90     	; 0x322 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 2c8:	30 93 b7 00 	sts	0x00B7, r19	; 0x8000b7 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 2cc:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 2d0:	10 91 b4 00 	lds	r17, 0x00B4	; 0x8000b4 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 2d4:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 2d6:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 2d8:	30 93 b4 00 	sts	0x00B4, r19	; 0x8000b4 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 2dc:	22 c0       	rjmp	.+68     	; 0x322 <sendAckAndReti>

000002de <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 2de:	00 91 b7 00 	lds	r16, 0x00B7	; 0x8000b7 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 2e2:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 2e4:	e4 f4       	brge	.+56     	; 0x31e <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 2e6:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 2e8:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 2ea:	49 f4       	brne	.+18     	; 0x2fe <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 2ec:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 2f0:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 2f2:	19 c0       	rjmp	.+50     	; 0x326 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 2f4:	00 93 63 00 	sts	0x0063, r16	; 0x800063 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 2f8:	cb e9       	ldi	r28, 0x9B	; 155
    ldi     YH, hi8(usbTxBuf)   ;[44]
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 2fc:	18 c0       	rjmp	.+48     	; 0x32e <usbSendAndReti>

000002fe <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 2fe:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 302:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 304:	10 c0       	rjmp	.+32     	; 0x326 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 306:	00 93 a6 00 	sts	0x00A6, r16	; 0x8000a6 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 30a:	c7 ea       	ldi	r28, 0xA7	; 167
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 30c:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 30e:	0f c0       	rjmp	.+30     	; 0x32e <usbSendAndReti>

00000310 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 310:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 312:	a8 f4       	brcc	.+42     	; 0x33e <doExorN1>
    subi    x4, 1               ;[-3]
 314:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 316:	a9 f4       	brne	.+42     	; 0x342 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 318:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 31a:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 31c:	f9 cf       	rjmp	.-14     	; 0x310 <stuffN1Delay>

0000031e <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 31e:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 320:	03 c0       	rjmp	.+6      	; 0x328 <usbSendX3>

00000322 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 322:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 324:	01 c0       	rjmp	.+2      	; 0x328 <usbSendX3>

00000326 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 326:	43 2f       	mov	r20, r19

00000328 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 328:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 32a:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 32c:	32 e0       	ldi	r19, 0x02	; 2

0000032e <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 32e:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK         ;[-11]
 330:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 332:	94 9a       	sbi	0x12, 4	; 18
    out     USBDDR, x2          ;[-8] <--- acquire bus
 334:	11 bb       	out	0x11, r17	; 17
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 336:	02 b3       	in	r16, 0x12	; 18
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 338:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 33a:	14 e1       	ldi	r17, 0x14	; 20
    push    x4                  ;[-4]
 33c:	5f 93       	push	r21

0000033e <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 33e:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 340:	56 e0       	ldi	r21, 0x06	; 6

00000342 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 342:	02 bb       	out	0x12, r16	; 18
    ror     shift               ;[01]
 344:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 346:	20 f4       	brcc	.+8      	; 0x350 <doExorN2>
    subi    x4, 1               ;[03]
 348:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 34a:	21 f4       	brne	.+8      	; 0x354 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 34c:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 34e:	f9 cf       	rjmp	.-14     	; 0x342 <commonN1>

00000350 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 350:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 352:	56 e0       	ldi	r21, 0x06	; 6

00000354 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 354:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 356:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 358:	02 bb       	out	0x12, r16	; 18
    brcs    txBitloop           ;[09]      [25] [41]
 35a:	d0 f2       	brcs	.-76     	; 0x310 <stuffN1Delay>

0000035c <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 35c:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 35e:	28 f4       	brcc	.+10     	; 0x36a <doExor6>
    subi    x4, 1               ;[44]
 360:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 362:	29 f4       	brne	.+10     	; 0x36e <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 364:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 366:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 368:	f9 cf       	rjmp	.-14     	; 0x35c <stuff6Delay>

0000036a <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 36a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 36c:	56 e0       	ldi	r21, 0x06	; 6

0000036e <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 36e:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 370:	02 bb       	out	0x12, r16	; 18
    brcc    doExor7             ;[49]
 372:	20 f4       	brcc	.+8      	; 0x37c <doExor7>
    subi    x4, 1               ;[50]
 374:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 376:	21 f4       	brne	.+8      	; 0x380 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 378:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 37a:	f9 cf       	rjmp	.-14     	; 0x36e <common6>

0000037c <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 37c:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 37e:	56 e0       	ldi	r21, 0x06	; 6

00000380 <common7>:
common7:
    ld      shift, y+           ;[53]
 380:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 382:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 384:	02 bb       	out	0x12, r16	; 18
    brne    txByteLoop          ;[57]
 386:	21 f6       	brne	.-120    	; 0x310 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 388:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[59]
 38a:	10 91 b8 00 	lds	r17, 0x00B8	; 0x8000b8 <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
 38e:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 390:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 392:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 394:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 396:	11 f0       	breq	.+4      	; 0x39c <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 398:	10 93 b2 00 	sts	0x00B2, r17	; 0x8000b2 <usbDeviceAddr>

0000039c <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 39c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 39e:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 3a0:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR          ;[06]
 3a2:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK         ;[07] set both pins to input
 3a4:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1              ;[08]
 3a6:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 3a8:	4b 7e       	andi	r20, 0xEB	; 235
    pop     x4                  ;[10]
 3aa:	5f 91       	pop	r21
    nop2                        ;[12]
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <skipAddrAssign+0x12>
    nop2                        ;[14]
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 3b0:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2          ;[17] <-- release bus now
 3b2:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 3b4:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 3b6:	71 cf       	rjmp	.-286    	; 0x29a <doReturn>

000003b8 <usbFunctionSetup>:
	if ((newbtn ^ oldbtn) != 0)						//something changed with this button ?
	{
		c = 1;
		oldbtn = (newbtn << 2);						//renew oldrty with newrty
		btn[n] = btn[n] & 0b11110011;				//clear oldrty bits within rty[i]
		btn[n] = (btn[n] | oldbtn);					//save "new" oldrty within rty[i]
 3b8:	fc 01       	movw	r30, r24
 3ba:	90 81       	ld	r25, Z
 3bc:	90 76       	andi	r25, 0x60	; 96
 3be:	90 32       	cpi	r25, 0x20	; 32
 3c0:	e1 f4       	brne	.+56     	; 0x3fa <usbFunctionSetup+0x42>
 3c2:	81 81       	ldd	r24, Z+1	; 0x01
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	41 f4       	brne	.+16     	; 0x3d8 <usbFunctionSetup+0x20>
 3c8:	87 e6       	ldi	r24, 0x67	; 103
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <usbMsgPtr+0x1>
 3d0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <usbMsgPtr>
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	08 95       	ret
 3d8:	82 30       	cpi	r24, 0x02	; 2
 3da:	41 f4       	brne	.+16     	; 0x3ec <usbFunctionSetup+0x34>
 3dc:	86 e6       	ldi	r24, 0x66	; 102
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <usbMsgPtr+0x1>
 3e4:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <usbMsgPtr>
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	08 95       	ret
 3ec:	8a 30       	cpi	r24, 0x0A	; 10
 3ee:	39 f4       	brne	.+14     	; 0x3fe <usbFunctionSetup+0x46>
 3f0:	83 81       	ldd	r24, Z+3	; 0x03
 3f2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <idleRate>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	08 95       	ret

00000402 <ReadEncoder>:
//save port status in bits 2,3 for next comparison in succeeding cycle
void ReadEncoder()
{
	char oldenc;
	char newenc;
	oldenc = ((enc[n] & 0b00001100) >> 2);			//align bits from last readout for compare
 402:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__data_end>
 406:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__data_end+0x1>
 40a:	fa 01       	movw	r30, r20
 40c:	e3 59       	subi	r30, 0x93	; 147
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	20 81       	ld	r18, Z
 412:	82 2f       	mov	r24, r18
 414:	8c 70       	andi	r24, 0x0C	; 12
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	95 95       	asr	r25
 41a:	87 95       	ror	r24
 41c:	95 95       	asr	r25
 41e:	87 95       	ror	r24
	newenc = (enc[n] & 0b00000011);					//only regard bits 0,1
 420:	32 2f       	mov	r19, r18
 422:	33 70       	andi	r19, 0x03	; 3
	DBG1(0x93, newenc, 1);
	DBG1(0x94, oldenc, 1);
	if ((newenc ^ oldenc) != 0)						//something changed ?
 424:	38 17       	cp	r19, r24
 426:	09 f4       	brne	.+2      	; 0x42a <ReadEncoder+0x28>
 428:	40 c0       	rjmp	.+128    	; 0x4aa <__stack+0x4b>
	{
		DBG1(0x95, newenc, 1);
		c = 1;
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__data_start+0x1>
 432:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__data_start>
		oldenc = oldenc << 1;						//shift left 1 bit
		oldenc = oldenc & 0b00000011;				//use only bits 0 and 1
		if ((newenc ^ oldenc) > 1)					//CCW rotation
 436:	88 0f       	add	r24, r24
 438:	82 27       	eor	r24, r18
 43a:	83 70       	andi	r24, 0x03	; 3
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	a8 f0       	brcs	.+42     	; 0x46a <__stack+0xb>
		{
			if (Dets < 3)							//special treatment for 4 or more pulses within timer delay
 440:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Dets>
 444:	83 30       	cpi	r24, 0x03	; 3
 446:	48 f4       	brcc	.+18     	; 0x45a <ReadEncoder+0x58>
			{
				enc[n] = (enc[n] | 0b01000000);
 448:	fa 01       	movw	r30, r20
 44a:	e3 59       	subi	r30, 0x93	; 147
 44c:	ff 4f       	sbci	r31, 0xFF	; 255
 44e:	20 64       	ori	r18, 0x40	; 64
 450:	20 83       	st	Z, r18
				Dets++;
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Dets>
 458:	1c c0       	rjmp	.+56     	; 0x492 <__stack+0x33>
			}
			else
			{
				enc[n] = (enc[n] | 0b00010000);
 45a:	fa 01       	movw	r30, r20
 45c:	e3 59       	subi	r30, 0x93	; 147
 45e:	ff 4f       	sbci	r31, 0xFF	; 255
 460:	20 61       	ori	r18, 0x10	; 16
 462:	20 83       	st	Z, r18
				Dets = 0;
 464:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Dets>
 468:	14 c0       	rjmp	.+40     	; 0x492 <__stack+0x33>
			}
		}
		else										//CW rotation
		{
			if (Dets < 3)
 46a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Dets>
 46e:	83 30       	cpi	r24, 0x03	; 3
 470:	48 f4       	brcc	.+18     	; 0x484 <__stack+0x25>
			{
				enc[n] = (enc[n] | 0b10000000);
 472:	fa 01       	movw	r30, r20
 474:	e3 59       	subi	r30, 0x93	; 147
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	20 68       	ori	r18, 0x80	; 128
 47a:	20 83       	st	Z, r18
				Dets++;
 47c:	8f 5f       	subi	r24, 0xFF	; 255
 47e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Dets>
 482:	07 c0       	rjmp	.+14     	; 0x492 <__stack+0x33>
			}
			else
			{
				enc[n] = (enc[n] | 0b00100000);
 484:	fa 01       	movw	r30, r20
 486:	e3 59       	subi	r30, 0x93	; 147
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	20 62       	ori	r18, 0x20	; 32
 48c:	20 83       	st	Z, r18
				Dets = 0;
 48e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Dets>
			}
		}//end if ((read ^ oldenc[i]) > 1)
		oldenc = newenc << 2;						//renew oldenc with newenc
		enc[n] = enc[n] & 0b11110011;				//clear oldenc bits 2,3 within enc[i]
 492:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 496:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
		enc[n] = (enc[n] | oldenc);					//save "new" oldenc within enc[i]
 49a:	e3 59       	subi	r30, 0x93	; 147
 49c:	ff 4f       	sbci	r31, 0xFF	; 255
 49e:	80 81       	ld	r24, Z
 4a0:	83 7f       	andi	r24, 0xF3	; 243
 4a2:	33 0f       	add	r19, r19
 4a4:	33 0f       	add	r19, r19
 4a6:	38 2b       	or	r19, r24
 4a8:	30 83       	st	Z, r19
 4aa:	08 95       	ret

000004ac <ReadAnalog>:

//read analog inputs
//different handling of 8bit and 10bit ADC
void ReadAnalog(void)
{
	ADMUX = 0x60 | (n & 0x0f);						//internal ref AVCC, left justified, channel n
 4ac:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 4b0:	8f 70       	andi	r24, 0x0F	; 15
 4b2:	80 66       	ori	r24, 0x60	; 96
 4b4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11000111;							//Enable ADC, start conversion, prescaler 128
 4b6:	87 ec       	ldi	r24, 0xC7	; 199
 4b8:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1<<ADSC));						//wait until ADSC bit is reset by CPU after conversion is complete
 4ba:	36 99       	sbic	0x06, 6	; 6
 4bc:	fe cf       	rjmp	.-4      	; 0x4ba <ReadAnalog+0xe>
	if (n < 6)										//8bit conversion
 4be:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 4c2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 4c6:	86 30       	cpi	r24, 0x06	; 6
 4c8:	91 05       	cpc	r25, r1
 4ca:	3c f4       	brge	.+14     	; 0x4da <ReadAnalog+0x2e>
	{												//conversion including init takes 25 cycles instead of 13 cycles
		pot[n] = (ADCH);	
 4cc:	25 b1       	in	r18, 0x05	; 5
		pot[n] = pot[n] ^ 0b10000000;				//invert sign
 4ce:	fc 01       	movw	r30, r24
 4d0:	eb 58       	subi	r30, 0x8B	; 139
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	20 58       	subi	r18, 0x80	; 128
 4d6:	20 83       	st	Z, r18
 4d8:	08 95       	ret
	}
	else											//10bit conversion
	{
		pot[n+8] = ADCL;							//requires 2 byte in report
 4da:	24 b1       	in	r18, 0x04	; 4
 4dc:	fc 01       	movw	r30, r24
 4de:	eb 58       	subi	r30, 0x8B	; 139
 4e0:	ff 4f       	sbci	r31, 0xFF	; 255
 4e2:	20 87       	std	Z+8, r18	; 0x08
		//pot[i+8] = (pot[i+8] ^ 0b10000000);		//value is signed, invert sign
		pot[n] = ADCH;								//read low byte first
 4e4:	85 b1       	in	r24, 0x05	; 5
 4e6:	80 83       	st	Z, r24
 4e8:	08 95       	ret

000004ea <init_TC1>:
}

void init_TC1(void)
{
	//TCCR1A = (1<<COM1A1) ;				//clear OC1A pin on match
	TCCR1B |= (1 << WGM12);					//normal mode
 4ea:	8e b5       	in	r24, 0x2e	; 46
 4ec:	88 60       	ori	r24, 0x08	; 8
 4ee:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10)|(1 << CS12);		//1024 prescaler
 4f0:	8e b5       	in	r24, 0x2e	; 46
 4f2:	85 60       	ori	r24, 0x05	; 5
 4f4:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x300;							//65ms@12MHz, interval time = (1/clk)*prescaler*OCR1A
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	93 e0       	ldi	r25, 0x03	; 3
 4fa:	9b bd       	out	0x2b, r25	; 43
 4fc:	8a bd       	out	0x2a, r24	; 42
 4fe:	08 95       	ret

00000500 <main>:

int __attribute__((noreturn)) main(void)
{

	uchar   i;
	enc[0] = 0;					//encoders
 500:	ed e6       	ldi	r30, 0x6D	; 109
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	10 82       	st	Z, r1
	enc[1] = 0;
 506:	11 82       	std	Z+1, r1	; 0x01
	enc[2] = 0;
 508:	12 82       	std	Z+2, r1	; 0x02
	enc[3] = 0;
 50a:	13 82       	std	Z+3, r1	; 0x03
	enc[4] = 0;
 50c:	14 82       	std	Z+4, r1	; 0x04
	enc[5] = 0;
 50e:	15 82       	std	Z+5, r1	; 0x05
	enc[6] = 0;
 510:	16 82       	std	Z+6, r1	; 0x06

	init_TC1();
 512:	0e 94 75 02 	call	0x4ea	; 0x4ea <init_TC1>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 516:	9e e0       	ldi	r25, 0x0E	; 14
 518:	88 e1       	ldi	r24, 0x18	; 24
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	f8 94       	cli
 51e:	a8 95       	wdr
 520:	81 bd       	out	0x21, r24	; 33
 522:	0f be       	out	0x3f, r0	; 63
 524:	91 bd       	out	0x21, r25	; 33
     * the status of the watchdog (on/off, period) is PRESERVED OVER RESET!
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */

    usbInit();
 526:	0e 94 b6 05 	call	0xb6c	; 0xb6c <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 52a:	8c 9a       	sbi	0x11, 4	; 17
 52c:	8f ef       	ldi	r24, 0xFF	; 255
    i = 0;
    while(--i)				/* fake USB disconnect for > 250 ms */
	{             
        wdt_reset();
 52e:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 530:	e7 eb       	ldi	r30, 0xB7	; 183
 532:	fb e0       	ldi	r31, 0x0B	; 11
 534:	31 97       	sbiw	r30, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <main+0x34>
 538:	00 c0       	rjmp	.+0      	; 0x53a <main+0x3a>
 53a:	00 00       	nop
 53c:	81 50       	subi	r24, 0x01	; 1
    DBG1(0x00, 0, 0);       /* debug output: main starts */

    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    i = 0;
    while(--i)				/* fake USB disconnect for > 250 ms */
 53e:	b9 f7       	brne	.-18     	; 0x52e <main+0x2e>
	{             
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
 540:	8c 98       	cbi	0x11, 4	; 17
    sei();
 542:	78 94       	sei
		PORTA |= 0b11011111;							//pull-up resistors, no pull-up on analog input PA5
		PORTB |= 0b11111111;
		PORTC |= 0b11111111;
		PORTD |= 0b11101011;							//no pull-ups on USB ports PD2, PD4

		enc[0] = (enc[0] & 0b00001100)
 544:	cd e6       	ldi	r28, 0x6D	; 109
 546:	d0 e0       	ldi	r29, 0x00	; 0
			ReadAnalog();
			n++;
		}

		//Buttons displayed inverted in Windows GUI: LSB left, MSB right
		reportBuffer.a1 =	((1<<PINB4) & ~(PINB & (1<<PINB4))) >>4		//SW1
 548:	07 e6       	ldi	r16, 0x67	; 103
 54a:	10 e0       	ldi	r17, 0x00	; 0
							| ((1<<PINA3) & ~(PINA & (1<<PINA3))) <<1	//S5
							| ((1<<PINA4) & ~(PINA & (1<<PINA4))) <<1	//S6
							| ((1<<PIND1) & ~(PIND & (1<<PIND1))) <<5	//S16
							| ((1<<PINC1) & ~(PINC & (1<<PINC1))) <<6;	//S17

		reportBuffer.a5 = pot[5];
 54c:	0f 2e       	mov	r0, r31
 54e:	f5 e7       	ldi	r31, 0x75	; 117
 550:	cf 2e       	mov	r12, r31
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	df 2e       	mov	r13, r31
 556:	f0 2d       	mov	r31, r0
		}
			 
	    DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
        wdt_reset();
        usbPoll();
        if(usbInterruptIsReady())
 558:	0f 2e       	mov	r0, r31
 55a:	f6 ea       	ldi	r31, 0xA6	; 166
 55c:	ef 2e       	mov	r14, r31
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	ff 2e       	mov	r15, r31
 562:	f0 2d       	mov	r31, r0
		DDRA &= 0b00000000;								//all ports input
		DDRB &= 0b00000000;								//
		DDRC &= 0b00000000;
		DDRD &= 0b00000000;								//USB ports handle DDR on their own
		PORTA |= 0b11011111;							//pull-up resistors, no pull-up on analog input PA5
		PORTB |= 0b11111111;
 564:	99 24       	eor	r9, r9
 566:	9a 94       	dec	r9
			n++;
		}

		//Process Analog Inputs
		//customize i for number of potentiometers									// <----- change here
		n = 5;											//ADC5 = PA5
 568:	0f 2e       	mov	r0, r31
 56a:	f5 e0       	ldi	r31, 0x05	; 5
 56c:	af 2e       	mov	r10, r31
 56e:	b1 2c       	mov	r11, r1
 570:	f0 2d       	mov	r31, r0
							| ((1<<PINC5) & ~(PINC & (1<<PINC5))) >>1	//S10
							| ((1<<PINC6) & ~(PINC & (1<<PINC6))) >>1	//S9
							| ((1<<PINC7) & ~(PINC & (1<<PINC7))) >>1	//S8
							| ((1<<PINA7) & ~(PINA & (1<<PINA7)));		//S7

		reportBuffer.a2 =	((1<<PINB0) & ~(PINB & (1<<PINB0))) 		//S1
 572:	68 94       	set
 574:	77 24       	eor	r7, r7
 576:	71 f8       	bld	r7, 1
    for(;;)					//main event loop
	{                

		//Process buttons
		//customize n for number of buttons												// <----- change here
		n = 0;
 578:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 57c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
							| ((1<<PINC5) & ~(PINC & (1<<PINC5))) >>1	//S10
							| ((1<<PINC6) & ~(PINC & (1<<PINC6))) >>1	//S9
							| ((1<<PINC7) & ~(PINC & (1<<PINC7))) >>1	//S8
							| ((1<<PINA7) & ~(PINA & (1<<PINA7)));		//S7

		reportBuffer.a2 =	((1<<PINB0) & ~(PINB & (1<<PINB0))) 		//S1
 580:	88 24       	eor	r8, r8
 582:	83 94       	inc	r8
		{
			ReadButton();
			n++;
		}

		DDRA &= 0b00000000;								//all ports input
 584:	8a b3       	in	r24, 0x1a	; 26
 586:	1a ba       	out	0x1a, r1	; 26
		DDRB &= 0b00000000;								//
 588:	87 b3       	in	r24, 0x17	; 23
 58a:	17 ba       	out	0x17, r1	; 23
		DDRC &= 0b00000000;
 58c:	84 b3       	in	r24, 0x14	; 20
 58e:	14 ba       	out	0x14, r1	; 20
		DDRD &= 0b00000000;								//USB ports handle DDR on their own
 590:	81 b3       	in	r24, 0x11	; 17
 592:	11 ba       	out	0x11, r1	; 17
		PORTA |= 0b11011111;							//pull-up resistors, no pull-up on analog input PA5
 594:	8b b3       	in	r24, 0x1b	; 27
 596:	8f 6d       	ori	r24, 0xDF	; 223
 598:	8b bb       	out	0x1b, r24	; 27
		PORTB |= 0b11111111;
 59a:	88 b3       	in	r24, 0x18	; 24
 59c:	98 ba       	out	0x18, r9	; 24
		PORTC |= 0b11111111;
 59e:	85 b3       	in	r24, 0x15	; 21
 5a0:	95 ba       	out	0x15, r9	; 21
		PORTD |= 0b11101011;							//no pull-ups on USB ports PD2, PD4
 5a2:	82 b3       	in	r24, 0x12	; 18
 5a4:	8b 6e       	ori	r24, 0xEB	; 235
 5a6:	82 bb       	out	0x12, r24	; 18

		enc[0] = (enc[0] & 0b00001100)
					| ((PIND & (1<<PIND3))>>2)			//Alps Encoder STEC SW1
 5a8:	80 b3       	in	r24, 0x10	; 16
					| ((PIND & (1<<PIND5))>>5);
 5aa:	20 b3       	in	r18, 0x10	; 16
		PORTA |= 0b11011111;							//pull-up resistors, no pull-up on analog input PA5
		PORTB |= 0b11111111;
		PORTC |= 0b11111111;
		PORTD |= 0b11101011;							//no pull-ups on USB ports PD2, PD4

		enc[0] = (enc[0] & 0b00001100)
 5ac:	88 70       	andi	r24, 0x08	; 8
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	95 95       	asr	r25
 5b2:	87 95       	ror	r24
 5b4:	95 95       	asr	r25
 5b6:	87 95       	ror	r24
 5b8:	25 fb       	bst	r18, 5
 5ba:	99 27       	eor	r25, r25
 5bc:	90 f9       	bld	r25, 0
 5be:	89 2b       	or	r24, r25
 5c0:	98 81       	ld	r25, Y
 5c2:	9c 70       	andi	r25, 0x0C	; 12
 5c4:	89 2b       	or	r24, r25
 5c6:	88 83       	st	Y, r24
					| ((PIND & (1<<PIND3))>>2)			//Alps Encoder STEC SW1
					| ((PIND & (1<<PIND5))>>5);
		enc[1] = (enc[1] & 0b00001100) 
					| ((PINB & (1<<PINB7))>>6)			//ELMA Encoder S16 inner
 5c8:	96 b3       	in	r25, 0x16	; 22
					| (PIND & (1<<PIND0));
 5ca:	30 b3       	in	r19, 0x10	; 16
		PORTD |= 0b11101011;							//no pull-ups on USB ports PD2, PD4

		enc[0] = (enc[0] & 0b00001100)
					| ((PIND & (1<<PIND3))>>2)			//Alps Encoder STEC SW1
					| ((PIND & (1<<PIND5))>>5);
		enc[1] = (enc[1] & 0b00001100) 
 5cc:	29 81       	ldd	r18, Y+1	; 0x01
 5ce:	2c 70       	andi	r18, 0x0C	; 12
 5d0:	83 2f       	mov	r24, r19
 5d2:	81 70       	andi	r24, 0x01	; 1
 5d4:	28 2b       	or	r18, r24
 5d6:	90 78       	andi	r25, 0x80	; 128
 5d8:	89 2f       	mov	r24, r25
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	08 2e       	mov	r0, r24
 5de:	89 2f       	mov	r24, r25
 5e0:	00 0c       	add	r0, r0
 5e2:	88 1f       	adc	r24, r24
 5e4:	99 0b       	sbc	r25, r25
 5e6:	00 0c       	add	r0, r0
 5e8:	88 1f       	adc	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	82 2b       	or	r24, r18
 5ee:	89 83       	std	Y+1, r24	; 0x01
					| ((PINB & (1<<PINB7))>>6)			//ELMA Encoder S16 inner
					| (PIND & (1<<PIND0));
		enc[2] = (enc[2] & 0b00001100)
					| ((PINB & (1<<PINB5))>>4)			//ELMA Encoder S16 outer
 5f0:	86 b3       	in	r24, 0x16	; 22
					| ((PINB & (1<<PINB6))>>6);
 5f2:	26 b3       	in	r18, 0x16	; 22
					| ((PIND & (1<<PIND3))>>2)			//Alps Encoder STEC SW1
					| ((PIND & (1<<PIND5))>>5);
		enc[1] = (enc[1] & 0b00001100) 
					| ((PINB & (1<<PINB7))>>6)			//ELMA Encoder S16 inner
					| (PIND & (1<<PIND0));
		enc[2] = (enc[2] & 0b00001100)
 5f4:	80 72       	andi	r24, 0x20	; 32
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	95 95       	asr	r25
 5fa:	87 95       	ror	r24
 5fc:	95 95       	asr	r25
 5fe:	87 95       	ror	r24
 600:	95 95       	asr	r25
 602:	87 95       	ror	r24
 604:	95 95       	asr	r25
 606:	87 95       	ror	r24
 608:	26 fb       	bst	r18, 6
 60a:	99 27       	eor	r25, r25
 60c:	90 f9       	bld	r25, 0
 60e:	89 2b       	or	r24, r25
 610:	9a 81       	ldd	r25, Y+2	; 0x02
 612:	9c 70       	andi	r25, 0x0C	; 12
 614:	89 2b       	or	r24, r25
 616:	8a 83       	std	Y+2, r24	; 0x02
					| ((PINB & (1<<PINB5))>>4)			//ELMA Encoder S16 outer
					| ((PINB & (1<<PINB6))>>6);
		enc[3] = (enc[3] & 0b00001100)
					| ((PINC & (1<<PINC2))>>1)			//ELMA Encoder S17 inner 
 618:	93 b3       	in	r25, 0x13	; 19
					| ((PINC & (1<<PINC0)));
 61a:	33 b3       	in	r19, 0x13	; 19
					| ((PINB & (1<<PINB7))>>6)			//ELMA Encoder S16 inner
					| (PIND & (1<<PIND0));
		enc[2] = (enc[2] & 0b00001100)
					| ((PINB & (1<<PINB5))>>4)			//ELMA Encoder S16 outer
					| ((PINB & (1<<PINB6))>>6);
		enc[3] = (enc[3] & 0b00001100)
 61c:	2b 81       	ldd	r18, Y+3	; 0x03
 61e:	2c 70       	andi	r18, 0x0C	; 12
 620:	83 2f       	mov	r24, r19
 622:	81 70       	andi	r24, 0x01	; 1
 624:	28 2b       	or	r18, r24
 626:	94 70       	andi	r25, 0x04	; 4
 628:	89 2f       	mov	r24, r25
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	95 95       	asr	r25
 62e:	87 95       	ror	r24
 630:	82 2b       	or	r24, r18
 632:	8b 83       	std	Y+3, r24	; 0x03
					| ((PINC & (1<<PINC2))>>1)			//ELMA Encoder S17 inner 
					| ((PINC & (1<<PINC0)));
		enc[4] = (enc[4] & 0b00001100)
					| ((PINB & (1<<PINB3))>>2)			//ELMA Encoder S18 inner
 634:	86 b3       	in	r24, 0x16	; 22
					| ((PINB & (1<<PINB2))>>2);
 636:	26 b3       	in	r18, 0x16	; 22
					| ((PINB & (1<<PINB5))>>4)			//ELMA Encoder S16 outer
					| ((PINB & (1<<PINB6))>>6);
		enc[3] = (enc[3] & 0b00001100)
					| ((PINC & (1<<PINC2))>>1)			//ELMA Encoder S17 inner 
					| ((PINC & (1<<PINC0)));
		enc[4] = (enc[4] & 0b00001100)
 638:	88 70       	andi	r24, 0x08	; 8
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	95 95       	asr	r25
 63e:	87 95       	ror	r24
 640:	95 95       	asr	r25
 642:	87 95       	ror	r24
 644:	22 fb       	bst	r18, 2
 646:	99 27       	eor	r25, r25
 648:	90 f9       	bld	r25, 0
 64a:	89 2b       	or	r24, r25
 64c:	9c 81       	ldd	r25, Y+4	; 0x04
 64e:	9c 70       	andi	r25, 0x0C	; 12
 650:	89 2b       	or	r24, r25
 652:	8c 83       	std	Y+4, r24	; 0x04
					| ((PINB & (1<<PINB3))>>2)			//ELMA Encoder S18 inner
					| ((PINB & (1<<PINB2))>>2);
		enc[5] = (enc[5] & 0b00001100)
					| ((PINA & (1<<PINA6))>>5)			//ELMA Encoder S18 outer
 654:	89 b3       	in	r24, 0x19	; 25
					| ((PINB & (1<<PINB1))>>1);
 656:	26 b3       	in	r18, 0x16	; 22
					| ((PINC & (1<<PINC2))>>1)			//ELMA Encoder S17 inner 
					| ((PINC & (1<<PINC0)));
		enc[4] = (enc[4] & 0b00001100)
					| ((PINB & (1<<PINB3))>>2)			//ELMA Encoder S18 inner
					| ((PINB & (1<<PINB2))>>2);
		enc[5] = (enc[5] & 0b00001100)
 658:	80 74       	andi	r24, 0x40	; 64
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	95 95       	asr	r25
 65e:	87 95       	ror	r24
 660:	95 95       	asr	r25
 662:	87 95       	ror	r24
 664:	95 95       	asr	r25
 666:	87 95       	ror	r24
 668:	95 95       	asr	r25
 66a:	87 95       	ror	r24
 66c:	95 95       	asr	r25
 66e:	87 95       	ror	r24
 670:	21 fb       	bst	r18, 1
 672:	99 27       	eor	r25, r25
 674:	90 f9       	bld	r25, 0
 676:	89 2b       	or	r24, r25
 678:	9d 81       	ldd	r25, Y+5	; 0x05
 67a:	9c 70       	andi	r25, 0x0C	; 12
 67c:	89 2b       	or	r24, r25
 67e:	8d 83       	std	Y+5, r24	; 0x05
					| ((PINA & (1<<PINA6))>>5)			//ELMA Encoder S18 outer
					| ((PINB & (1<<PINB1))>>1);
		n=0;
 680:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 684:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
		while (n < 6)
		{
			ReadEncoder();
 688:	0e 94 01 02 	call	0x402	; 0x402 <ReadEncoder>
			n++;
 68c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 690:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 69a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
					| ((PINB & (1<<PINB2))>>2);
		enc[5] = (enc[5] & 0b00001100)
					| ((PINA & (1<<PINA6))>>5)			//ELMA Encoder S18 outer
					| ((PINB & (1<<PINB1))>>1);
		n=0;
		while (n < 6)
 69e:	06 97       	sbiw	r24, 0x06	; 6
 6a0:	9c f3       	brlt	.-26     	; 0x688 <main+0x188>
			n++;
		}

		//Process Analog Inputs
		//customize i for number of potentiometers									// <----- change here
		n = 5;											//ADC5 = PA5
 6a2:	b0 92 65 00 	sts	0x0065, r11	; 0x800065 <__data_end+0x1>
 6a6:	a0 92 64 00 	sts	0x0064, r10	; 0x800064 <__data_end>
		while (n < 6)
		{
			ReadAnalog();
 6aa:	0e 94 56 02 	call	0x4ac	; 0x4ac <ReadAnalog>
			n++;
 6ae:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 6b2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 6bc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
		}

		//Process Analog Inputs
		//customize i for number of potentiometers									// <----- change here
		n = 5;											//ADC5 = PA5
		while (n < 6)
 6c0:	06 97       	sbiw	r24, 0x06	; 6
 6c2:	9c f3       	brlt	.-26     	; 0x6aa <main+0x1aa>
			ReadAnalog();
			n++;
		}

		//Buttons displayed inverted in Windows GUI: LSB left, MSB right
		reportBuffer.a1 =	((1<<PINB4) & ~(PINB & (1<<PINB4))) >>4		//SW1
 6c4:	e6 b3       	in	r30, 0x16	; 22
							| ((1<<PIND6) & ~(PIND & (1<<PIND6))) >>5	//S13
 6c6:	60 b3       	in	r22, 0x10	; 16
							| ((1<<PINC3) & ~(PINC & (1<<PINC3))) >>1	//S12
 6c8:	43 b3       	in	r20, 0x13	; 19
							| ((1<<PINC4) & ~(PINC & (1<<PINC4))) >>1	//S11
 6ca:	33 b3       	in	r19, 0x13	; 19
							| ((1<<PINC5) & ~(PINC & (1<<PINC5))) >>1	//S10
 6cc:	23 b3       	in	r18, 0x13	; 19
							| ((1<<PINC6) & ~(PINC & (1<<PINC6))) >>1	//S9
 6ce:	93 b3       	in	r25, 0x13	; 19
							| ((1<<PINC7) & ~(PINC & (1<<PINC7))) >>1	//S8
 6d0:	83 b3       	in	r24, 0x13	; 19
			ReadAnalog();
			n++;
		}

		//Buttons displayed inverted in Windows GUI: LSB left, MSB right
		reportBuffer.a1 =	((1<<PINB4) & ~(PINB & (1<<PINB4))) >>4		//SW1
 6d2:	59 b3       	in	r21, 0x19	; 25
 6d4:	e0 71       	andi	r30, 0x10	; 16
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	e0 95       	com	r30
 6da:	f0 95       	com	r31
 6dc:	e4 fb       	bst	r30, 4
 6de:	aa 27       	eor	r26, r26
 6e0:	a0 f9       	bld	r26, 0
 6e2:	60 74       	andi	r22, 0x40	; 64
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	60 95       	com	r22
 6e8:	70 95       	com	r23
 6ea:	60 74       	andi	r22, 0x40	; 64
 6ec:	77 27       	eor	r23, r23
 6ee:	75 95       	asr	r23
 6f0:	67 95       	ror	r22
 6f2:	75 95       	asr	r23
 6f4:	67 95       	ror	r22
 6f6:	75 95       	asr	r23
 6f8:	67 95       	ror	r22
 6fa:	75 95       	asr	r23
 6fc:	67 95       	ror	r22
 6fe:	75 95       	asr	r23
 700:	67 95       	ror	r22
 702:	a6 2b       	or	r26, r22
 704:	50 78       	andi	r21, 0x80	; 128
 706:	50 95       	com	r21
 708:	50 78       	andi	r21, 0x80	; 128
 70a:	a5 2b       	or	r26, r21
 70c:	74 2f       	mov	r23, r20
 70e:	78 70       	andi	r23, 0x08	; 8
 710:	47 2f       	mov	r20, r23
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	40 95       	com	r20
 716:	50 95       	com	r21
 718:	48 70       	andi	r20, 0x08	; 8
 71a:	55 27       	eor	r21, r21
 71c:	55 95       	asr	r21
 71e:	47 95       	ror	r20
 720:	4a 2b       	or	r20, r26
 722:	30 71       	andi	r19, 0x10	; 16
 724:	a3 2f       	mov	r26, r19
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	a0 95       	com	r26
 72a:	b0 95       	com	r27
 72c:	a0 71       	andi	r26, 0x10	; 16
 72e:	bb 27       	eor	r27, r27
 730:	b5 95       	asr	r27
 732:	a7 95       	ror	r26
 734:	a4 2b       	or	r26, r20
 736:	32 2f       	mov	r19, r18
 738:	30 72       	andi	r19, 0x20	; 32
 73a:	43 2f       	mov	r20, r19
 73c:	50 e0       	ldi	r21, 0x00	; 0
 73e:	40 95       	com	r20
 740:	50 95       	com	r21
 742:	40 72       	andi	r20, 0x20	; 32
 744:	55 27       	eor	r21, r21
 746:	55 95       	asr	r21
 748:	47 95       	ror	r20
 74a:	4a 2b       	or	r20, r26
 74c:	90 74       	andi	r25, 0x40	; 64
 74e:	29 2f       	mov	r18, r25
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	20 95       	com	r18
 754:	30 95       	com	r19
 756:	20 74       	andi	r18, 0x40	; 64
 758:	33 27       	eor	r19, r19
 75a:	35 95       	asr	r19
 75c:	27 95       	ror	r18
 75e:	24 2b       	or	r18, r20
 760:	98 2f       	mov	r25, r24
 762:	90 78       	andi	r25, 0x80	; 128
 764:	89 2f       	mov	r24, r25
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	80 95       	com	r24
 76a:	90 95       	com	r25
 76c:	80 78       	andi	r24, 0x80	; 128
 76e:	99 27       	eor	r25, r25
 770:	95 95       	asr	r25
 772:	87 95       	ror	r24
 774:	82 2b       	or	r24, r18
 776:	f8 01       	movw	r30, r16
 778:	80 83       	st	Z, r24
							| ((1<<PINC5) & ~(PINC & (1<<PINC5))) >>1	//S10
							| ((1<<PINC6) & ~(PINC & (1<<PINC6))) >>1	//S9
							| ((1<<PINC7) & ~(PINC & (1<<PINC7))) >>1	//S8
							| ((1<<PINA7) & ~(PINA & (1<<PINA7)));		//S7

		reportBuffer.a2 =	((1<<PINB0) & ~(PINB & (1<<PINB0))) 		//S1
 77a:	e6 b3       	in	r30, 0x16	; 22
 77c:	e8 25       	eor	r30, r8
 77e:	e1 70       	andi	r30, 0x01	; 1
 780:	c8 9b       	sbis	0x19, 0	; 25
 782:	02 c0       	rjmp	.+4      	; 0x788 <main+0x288>
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	01 c0       	rjmp	.+2      	; 0x78a <main+0x28a>
 788:	f7 2d       	mov	r31, r7
							| ((1<<PINA0) & ~(PINA & (1<<PINA0))) <<1	//S2
							| ((1<<PINA1) & ~(PINA & (1<<PINA1))) <<1	//S3
 78a:	49 b3       	in	r20, 0x19	; 25
							| ((1<<PINA2) & ~(PINA & (1<<PINA2))) <<1	//S4
 78c:	69 b3       	in	r22, 0x19	; 25
							| ((1<<PINA3) & ~(PINA & (1<<PINA3))) <<1	//S5
 78e:	39 b3       	in	r19, 0x19	; 25
							| ((1<<PINA4) & ~(PINA & (1<<PINA4))) <<1	//S6
 790:	29 b3       	in	r18, 0x19	; 25
							| ((1<<PIND1) & ~(PIND & (1<<PIND1))) <<5	//S16
 792:	90 b3       	in	r25, 0x10	; 16
							| ((1<<PINC1) & ~(PINC & (1<<PINC1))) <<6;	//S17
 794:	83 b3       	in	r24, 0x13	; 19
							| ((1<<PINC5) & ~(PINC & (1<<PINC5))) >>1	//S10
							| ((1<<PINC6) & ~(PINC & (1<<PINC6))) >>1	//S9
							| ((1<<PINC7) & ~(PINC & (1<<PINC7))) >>1	//S8
							| ((1<<PINA7) & ~(PINA & (1<<PINA7)));		//S7

		reportBuffer.a2 =	((1<<PINB0) & ~(PINB & (1<<PINB0))) 		//S1
 796:	42 70       	andi	r20, 0x02	; 2
 798:	50 e0       	ldi	r21, 0x00	; 0
 79a:	40 95       	com	r20
 79c:	50 95       	com	r21
 79e:	42 70       	andi	r20, 0x02	; 2
 7a0:	55 27       	eor	r21, r21
 7a2:	44 0f       	add	r20, r20
 7a4:	55 1f       	adc	r21, r21
 7a6:	64 70       	andi	r22, 0x04	; 4
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	60 95       	com	r22
 7ac:	70 95       	com	r23
 7ae:	64 70       	andi	r22, 0x04	; 4
 7b0:	77 27       	eor	r23, r23
 7b2:	66 0f       	add	r22, r22
 7b4:	77 1f       	adc	r23, r23
 7b6:	46 2b       	or	r20, r22
 7b8:	e4 2b       	or	r30, r20
 7ba:	38 70       	andi	r19, 0x08	; 8
 7bc:	a3 2f       	mov	r26, r19
 7be:	b0 e0       	ldi	r27, 0x00	; 0
 7c0:	a0 95       	com	r26
 7c2:	b0 95       	com	r27
 7c4:	a8 70       	andi	r26, 0x08	; 8
 7c6:	bb 27       	eor	r27, r27
 7c8:	aa 0f       	add	r26, r26
 7ca:	bb 1f       	adc	r27, r27
 7cc:	ea 2b       	or	r30, r26
 7ce:	32 2f       	mov	r19, r18
 7d0:	30 71       	andi	r19, 0x10	; 16
 7d2:	a3 2f       	mov	r26, r19
 7d4:	b0 e0       	ldi	r27, 0x00	; 0
 7d6:	a0 95       	com	r26
 7d8:	b0 95       	com	r27
 7da:	a0 71       	andi	r26, 0x10	; 16
 7dc:	bb 27       	eor	r27, r27
 7de:	aa 0f       	add	r26, r26
 7e0:	bb 1f       	adc	r27, r27
 7e2:	ae 2b       	or	r26, r30
 7e4:	92 70       	andi	r25, 0x02	; 2
 7e6:	29 2f       	mov	r18, r25
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	20 95       	com	r18
 7ec:	30 95       	com	r19
 7ee:	22 70       	andi	r18, 0x02	; 2
 7f0:	33 27       	eor	r19, r19
 7f2:	22 0f       	add	r18, r18
 7f4:	33 1f       	adc	r19, r19
 7f6:	22 95       	swap	r18
 7f8:	32 95       	swap	r19
 7fa:	30 7f       	andi	r19, 0xF0	; 240
 7fc:	32 27       	eor	r19, r18
 7fe:	20 7f       	andi	r18, 0xF0	; 240
 800:	32 27       	eor	r19, r18
 802:	2a 2b       	or	r18, r26
 804:	98 2f       	mov	r25, r24
 806:	92 70       	andi	r25, 0x02	; 2
 808:	89 2f       	mov	r24, r25
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	80 95       	com	r24
 80e:	90 95       	com	r25
 810:	82 70       	andi	r24, 0x02	; 2
 812:	99 27       	eor	r25, r25
 814:	00 24       	eor	r0, r0
 816:	96 95       	lsr	r25
 818:	87 95       	ror	r24
 81a:	07 94       	ror	r0
 81c:	96 95       	lsr	r25
 81e:	87 95       	ror	r24
 820:	07 94       	ror	r0
 822:	98 2f       	mov	r25, r24
 824:	80 2d       	mov	r24, r0
 826:	82 2b       	or	r24, r18
 828:	8f 2b       	or	r24, r31
 82a:	f8 01       	movw	r30, r16
 82c:	81 83       	std	Z+1, r24	; 0x01
							| ((1<<PINA3) & ~(PINA & (1<<PINA3))) <<1	//S5
							| ((1<<PINA4) & ~(PINA & (1<<PINA4))) <<1	//S6
							| ((1<<PIND1) & ~(PIND & (1<<PIND1))) <<5	//S16
							| ((1<<PINC1) & ~(PINC & (1<<PINC1))) <<6;	//S17

		reportBuffer.a5 = pot[5];
 82e:	f6 01       	movw	r30, r12
 830:	85 81       	ldd	r24, Z+5	; 0x05
 832:	f8 01       	movw	r30, r16
 834:	84 83       	std	Z+4, r24	; 0x04

		//report encoders only when input change, to control pulse length
		if (c == 1)
 836:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 83a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	61 f5       	brne	.+88     	; 0x89a <main+0x39a>
		{
			reportBuffer.a3 = (enc[0] & 0b11000000) >>6
								| (enc[1] & 0b11000000) >>4
								| (enc[2] & 0b11000000) >>2
								| (enc[3] & 0b11000000);								;
 842:	8b 81       	ldd	r24, Y+3	; 0x03
		reportBuffer.a5 = pot[5];

		//report encoders only when input change, to control pulse length
		if (c == 1)
		{
			reportBuffer.a3 = (enc[0] & 0b11000000) >>6
 844:	38 81       	ld	r19, Y
 846:	32 95       	swap	r19
 848:	36 95       	lsr	r19
 84a:	36 95       	lsr	r19
 84c:	33 70       	andi	r19, 0x03	; 3
 84e:	28 2f       	mov	r18, r24
 850:	20 7c       	andi	r18, 0xC0	; 192
 852:	43 2f       	mov	r20, r19
 854:	42 2b       	or	r20, r18
 856:	29 81       	ldd	r18, Y+1	; 0x01
 858:	20 7c       	andi	r18, 0xC0	; 192
 85a:	22 95       	swap	r18
 85c:	2f 70       	andi	r18, 0x0F	; 15
 85e:	32 2f       	mov	r19, r18
 860:	34 2b       	or	r19, r20
 862:	2a 81       	ldd	r18, Y+2	; 0x02
 864:	20 7c       	andi	r18, 0xC0	; 192
 866:	26 95       	lsr	r18
 868:	26 95       	lsr	r18
 86a:	23 2b       	or	r18, r19
 86c:	22 83       	std	Z+2, r18	; 0x02
								| (enc[1] & 0b11000000) >>4
								| (enc[2] & 0b11000000) >>2
								| (enc[3] & 0b11000000);								;
			reportBuffer.a4 = (enc[3] & 0b00110000) >>4					//S17 fast option
 86e:	2c 81       	ldd	r18, Y+4	; 0x04
 870:	20 7c       	andi	r18, 0xC0	; 192
 872:	80 73       	andi	r24, 0x30	; 48
 874:	82 2b       	or	r24, r18
 876:	98 2f       	mov	r25, r24
 878:	92 95       	swap	r25
 87a:	9f 70       	andi	r25, 0x0F	; 15
 87c:	8d 81       	ldd	r24, Y+5	; 0x05
 87e:	80 7c       	andi	r24, 0xC0	; 192
 880:	86 95       	lsr	r24
 882:	86 95       	lsr	r24
 884:	89 2b       	or	r24, r25
 886:	83 83       	std	Z+3, r24	; 0x03
								| (enc[4] & 0b11000000) >>4
								| (enc[5] & 0b11000000) >>2;
			c = 0;
 888:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 88c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			TIFR |= (1<<OCF1A);					//clear timer compare flag
 890:	88 b7       	in	r24, 0x38	; 56
 892:	80 61       	ori	r24, 0x10	; 16
 894:	88 bf       	out	0x38, r24	; 56
			TCNT1 = 0x0000;						//restart timer
 896:	1d bc       	out	0x2d, r1	; 45
 898:	1c bc       	out	0x2c, r1	; 44
 89a:	87 eb       	ldi	r24, 0xB7	; 183
 89c:	9b e0       	ldi	r25, 0x0B	; 11
 89e:	01 97       	sbiw	r24, 0x01	; 1
 8a0:	f1 f7       	brne	.-4      	; 0x89e <main+0x39e>
 8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <main+0x3a4>
 8a4:	00 00       	nop

		_delay_ms(1);							//for debouncing

		//control pulse length for encoders
		//check for time elapsed, if so, clear buffers carrying encoder
		if (TIFR & (1<<OCF1A))						
 8a6:	08 b6       	in	r0, 0x38	; 56
 8a8:	04 fe       	sbrs	r0, 4
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <main+0x3bc>
		{
			reportBuffer.a3 = 0; 				//clear encoders, don't clear buttons
 8ac:	f8 01       	movw	r30, r16
 8ae:	12 82       	std	Z+2, r1	; 0x02
			reportBuffer.a4 = 0;
 8b0:	13 82       	std	Z+3, r1	; 0x03
			Dets = 0;
 8b2:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Dets>
			TIFR |= (1<<OCF1A);					//clear timer compare flag
 8b6:	88 b7       	in	r24, 0x38	; 56
 8b8:	80 61       	ori	r24, 0x10	; 16
 8ba:	88 bf       	out	0x38, r24	; 56
		}
			 
	    DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
        wdt_reset();
 8bc:	a8 95       	wdr
        usbPoll();
 8be:	0e 94 92 04 	call	0x924	; 0x924 <usbPoll>
        if(usbInterruptIsReady())
 8c2:	f7 01       	movw	r30, r14
 8c4:	80 81       	ld	r24, Z
 8c6:	84 ff       	sbrs	r24, 4
 8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <main+0x3d4>
		{
 			DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
			/* called after every poll of the interrupt endpoint */
			usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
 8ca:	65 e0       	ldi	r22, 0x05	; 5
 8cc:	c8 01       	movw	r24, r16
 8ce:	0e 94 6f 04 	call	0x8de	; 0x8de <usbSetInterrupt>
 8d2:	52 ce       	rjmp	.-860    	; 0x578 <main+0x78>
    for(;;)					//main event loop
	{                

		//Process buttons
		//customize n for number of buttons												// <----- change here
		n = 0;
 8d4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 8d8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
 8dc:	53 ce       	rjmp	.-858    	; 0x584 <main+0x84>

000008de <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 8de:	cf 93       	push	r28
 8e0:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 8e2:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <usbTxStatus1>
 8e6:	24 ff       	sbrs	r18, 4
 8e8:	07 c0       	rjmp	.+14     	; 0x8f8 <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 8ea:	e6 ea       	ldi	r30, 0xA6	; 166
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	31 81       	ldd	r19, Z+1	; 0x01
 8f0:	28 e8       	ldi	r18, 0x88	; 136
 8f2:	23 27       	eor	r18, r19
 8f4:	21 83       	std	Z+1, r18	; 0x01
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 8f8:	2a e5       	ldi	r18, 0x5A	; 90
 8fa:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <usbTxStatus1>
 8fe:	e8 2f       	mov	r30, r24
 900:	f9 2f       	mov	r31, r25
 902:	a8 ea       	ldi	r26, 0xA8	; 168
 904:	b0 e0       	ldi	r27, 0x00	; 0
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 906:	8c 2f       	mov	r24, r28
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 908:	91 91       	ld	r25, Z+
 90a:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 90c:	81 50       	subi	r24, 0x01	; 1
 90e:	e1 f7       	brne	.-8      	; 0x908 <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 910:	6c 2f       	mov	r22, r28
 912:	88 ea       	ldi	r24, 0xA8	; 168
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 9e 00 	call	0x13c	; 0x13c <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 91a:	cc 5f       	subi	r28, 0xFC	; 252
 91c:	c0 93 a6 00 	sts	0x00A6, r28	; 0x8000a6 <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 920:	cf 91       	pop	r28
 922:	08 95       	ret

00000924 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 928:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <usbRxLen>
 92c:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 92e:	0a f4       	brpl	.+2      	; 0x932 <usbPoll+0xe>
 930:	b5 c0       	rjmp	.+362    	; 0xa9c <usbPoll+0x178>
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 932:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <usbRxToken>
 936:	9d 32       	cpi	r25, 0x2D	; 45
 938:	09 f0       	breq	.+2      	; 0x93c <usbPoll+0x18>
 93a:	ae c0       	rjmp	.+348    	; 0xa98 <usbPoll+0x174>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 93c:	88 30       	cpi	r24, 0x08	; 8
 93e:	09 f0       	breq	.+2      	; 0x942 <usbPoll+0x1e>
 940:	ab c0       	rjmp	.+342    	; 0xa98 <usbPoll+0x174>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 942:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <usbInputBufOffset>
 946:	cc e0       	ldi	r28, 0x0C	; 12
 948:	d0 e0       	ldi	r29, 0x00	; 0
 94a:	c8 1b       	sub	r28, r24
 94c:	d1 09       	sbc	r29, r1
 94e:	c5 54       	subi	r28, 0x45	; 69
 950:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 952:	83 ec       	ldi	r24, 0xC3	; 195
 954:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 958:	8a e5       	ldi	r24, 0x5A	; 90
 95a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <usbTxLen>
        usbMsgFlags = 0;
 95e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 962:	88 81       	ld	r24, Y
 964:	80 76       	andi	r24, 0x60	; 96
 966:	21 f0       	breq	.+8      	; 0x970 <usbPoll+0x4c>
            replyLen = usbFunctionSetup(data);
 968:	ce 01       	movw	r24, r28
 96a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usbFunctionSetup>
 96e:	8b c0       	rjmp	.+278    	; 0xa86 <usbPoll+0x162>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 970:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 972:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 976:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 978:	81 11       	cpse	r24, r1
 97a:	06 c0       	rjmp	.+12     	; 0x988 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 97c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 980:	24 ea       	ldi	r18, 0xA4	; 164
 982:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 984:	82 e0       	ldi	r24, 0x02	; 2
 986:	7b c0       	rjmp	.+246    	; 0xa7e <usbPoll+0x15a>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 988:	85 30       	cpi	r24, 0x05	; 5
 98a:	31 f4       	brne	.+12     	; 0x998 <usbPoll+0x74>
        usbNewDeviceAddr = value;
 98c:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 990:	24 ea       	ldi	r18, 0xA4	; 164
 992:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 994:	80 e0       	ldi	r24, 0x00	; 0
 996:	73 c0       	rjmp	.+230    	; 0xa7e <usbPoll+0x15a>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 998:	86 30       	cpi	r24, 0x06	; 6
 99a:	09 f0       	breq	.+2      	; 0x99e <usbPoll+0x7a>
 99c:	50 c0       	rjmp	.+160    	; 0xa3e <usbPoll+0x11a>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 99e:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 9a0:	81 30       	cpi	r24, 0x01	; 1
 9a2:	41 f4       	brne	.+16     	; 0x9b4 <usbPoll+0x90>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 9a4:	8b e9       	ldi	r24, 0x9B	; 155
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <usbMsgPtr+0x1>
 9ac:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <usbMsgPtr>
 9b0:	82 e1       	ldi	r24, 0x12	; 18
 9b2:	41 c0       	rjmp	.+130    	; 0xa36 <usbPoll+0x112>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 9b4:	82 30       	cpi	r24, 0x02	; 2
 9b6:	41 f4       	brne	.+16     	; 0x9c8 <usbPoll+0xa4>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 9b8:	89 e7       	ldi	r24, 0x79	; 121
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <usbMsgPtr+0x1>
 9c0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <usbMsgPtr>
 9c4:	82 e2       	ldi	r24, 0x22	; 34
 9c6:	37 c0       	rjmp	.+110    	; 0xa36 <usbPoll+0x112>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 9c8:	83 30       	cpi	r24, 0x03	; 3
 9ca:	f1 f4       	brne	.+60     	; 0xa08 <usbPoll+0xe4>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 9cc:	91 11       	cpse	r25, r1
 9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <usbPoll+0xbc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 9d0:	8f ec       	ldi	r24, 0xCF	; 207
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <usbMsgPtr+0x1>
 9d8:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <usbMsgPtr>
 9dc:	84 e0       	ldi	r24, 0x04	; 4
 9de:	2b c0       	rjmp	.+86     	; 0xa36 <usbPoll+0x112>
        SWITCH_CASE(1)
 9e0:	91 30       	cpi	r25, 0x01	; 1
 9e2:	41 f4       	brne	.+16     	; 0x9f4 <usbPoll+0xd0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 9e4:	87 ec       	ldi	r24, 0xC7	; 199
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <usbMsgPtr+0x1>
 9ec:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <usbMsgPtr>
 9f0:	88 e0       	ldi	r24, 0x08	; 8
 9f2:	21 c0       	rjmp	.+66     	; 0xa36 <usbPoll+0x112>
        SWITCH_CASE(2)
 9f4:	92 30       	cpi	r25, 0x02	; 2
 9f6:	e1 f4       	brne	.+56     	; 0xa30 <usbPoll+0x10c>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 9f8:	8d ea       	ldi	r24, 0xAD	; 173
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <usbMsgPtr+0x1>
 a00:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <usbMsgPtr>
 a04:	8a e1       	ldi	r24, 0x1A	; 26
 a06:	17 c0       	rjmp	.+46     	; 0xa36 <usbPoll+0x112>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 a08:	81 32       	cpi	r24, 0x21	; 33
 a0a:	41 f4       	brne	.+16     	; 0xa1c <usbPoll+0xf8>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 a0c:	8b e8       	ldi	r24, 0x8B	; 139
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <usbMsgPtr+0x1>
 a14:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <usbMsgPtr>
 a18:	89 e0       	ldi	r24, 0x09	; 9
 a1a:	0d c0       	rjmp	.+26     	; 0xa36 <usbPoll+0x112>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 a1c:	82 32       	cpi	r24, 0x22	; 34
 a1e:	51 f4       	brne	.+20     	; 0xa34 <usbPoll+0x110>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 a20:	84 e5       	ldi	r24, 0x54	; 84
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <usbMsgPtr+0x1>
 a28:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <usbMsgPtr>
 a2c:	85 e2       	ldi	r24, 0x25	; 37
 a2e:	03 c0       	rjmp	.+6      	; 0xa36 <usbPoll+0x112>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	01 c0       	rjmp	.+2      	; 0xa36 <usbPoll+0x112>
 a34:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 a36:	90 e4       	ldi	r25, 0x40	; 64
 a38:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <usbMsgFlags>
 a3c:	24 c0       	rjmp	.+72     	; 0xa86 <usbPoll+0x162>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 a3e:	88 30       	cpi	r24, 0x08	; 8
 a40:	99 f0       	breq	.+38     	; 0xa68 <usbPoll+0x144>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 a42:	89 30       	cpi	r24, 0x09	; 9
 a44:	31 f4       	brne	.+12     	; 0xa52 <usbPoll+0x12e>
        usbConfiguration = value;
 a46:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 a4a:	24 ea       	ldi	r18, 0xA4	; 164
 a4c:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	16 c0       	rjmp	.+44     	; 0xa7e <usbPoll+0x15a>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 a52:	8a 30       	cpi	r24, 0x0A	; 10
 a54:	69 f0       	breq	.+26     	; 0xa70 <usbPoll+0x14c>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 a56:	8b 30       	cpi	r24, 0x0B	; 11
 a58:	79 f4       	brne	.+30     	; 0xa78 <usbPoll+0x154>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 a5a:	8b e4       	ldi	r24, 0x4B	; 75
 a5c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 a60:	24 ea       	ldi	r18, 0xA4	; 164
 a62:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 a64:	80 e0       	ldi	r24, 0x00	; 0
 a66:	0b c0       	rjmp	.+22     	; 0xa7e <usbPoll+0x15a>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 a68:	2a eb       	ldi	r18, 0xBA	; 186
 a6a:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	07 c0       	rjmp	.+14     	; 0xa7e <usbPoll+0x15a>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 a70:	24 ea       	ldi	r18, 0xA4	; 164
 a72:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	03 c0       	rjmp	.+6      	; 0xa7e <usbPoll+0x15a>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 a78:	24 ea       	ldi	r18, 0xA4	; 164
 a7a:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 a7c:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 a7e:	30 93 b6 00 	sts	0x00B6, r19	; 0x8000b6 <usbMsgPtr+0x1>
 a82:	20 93 b5 00 	sts	0x00B5, r18	; 0x8000b5 <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 a86:	9f 81       	ldd	r25, Y+7	; 0x07
 a88:	91 11       	cpse	r25, r1
 a8a:	04 c0       	rjmp	.+8      	; 0xa94 <usbPoll+0x170>
 a8c:	9e 81       	ldd	r25, Y+6	; 0x06
 a8e:	98 17       	cp	r25, r24
 a90:	08 f4       	brcc	.+2      	; 0xa94 <usbPoll+0x170>
 a92:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 a94:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 a98:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 a9c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <usbTxLen>
 aa0:	84 ff       	sbrs	r24, 4
 aa2:	4c c0       	rjmp	.+152    	; 0xb3c <usbPoll+0x218>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 aa4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <usbMsgLen>
 aa8:	8f 3f       	cpi	r24, 0xFF	; 255
 aaa:	09 f4       	brne	.+2      	; 0xaae <usbPoll+0x18a>
 aac:	47 c0       	rjmp	.+142    	; 0xb3c <usbPoll+0x218>
 aae:	c8 2f       	mov	r28, r24
 ab0:	89 30       	cpi	r24, 0x09	; 9
 ab2:	08 f0       	brcs	.+2      	; 0xab6 <usbPoll+0x192>
 ab4:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 ab6:	8c 1b       	sub	r24, r28
 ab8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 abc:	eb e9       	ldi	r30, 0x9B	; 155
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	90 81       	ld	r25, Z
 ac2:	88 e8       	ldi	r24, 0x88	; 136
 ac4:	89 27       	eor	r24, r25
 ac6:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 ac8:	cc 23       	and	r28, r28
 aca:	09 f4       	brne	.+2      	; 0xace <usbPoll+0x1aa>
 acc:	45 c0       	rjmp	.+138    	; 0xb58 <usbPoll+0x234>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 ace:	20 91 b5 00 	lds	r18, 0x00B5	; 0x8000b5 <usbMsgPtr>
 ad2:	30 91 b6 00 	lds	r19, 0x00B6	; 0x8000b6 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 ad6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <usbMsgFlags>
 ada:	86 ff       	sbrs	r24, 6
 adc:	10 c0       	rjmp	.+32     	; 0xafe <usbPoll+0x1da>
 ade:	ac e9       	ldi	r26, 0x9C	; 156
 ae0:	b0 e0       	ldi	r27, 0x00	; 0
 ae2:	f9 01       	movw	r30, r18
 ae4:	8c 2f       	mov	r24, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 ae6:	94 91       	lpm	r25, Z
                    *data++ = c;
 ae8:	9d 93       	st	X+, r25
                    r++;
 aea:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 aec:	81 50       	subi	r24, 0x01	; 1
 aee:	d9 f7       	brne	.-10     	; 0xae6 <usbPoll+0x1c2>
 af0:	2f 5f       	subi	r18, 0xFF	; 255
 af2:	3f 4f       	sbci	r19, 0xFF	; 255
 af4:	8f ef       	ldi	r24, 0xFF	; 255
 af6:	8c 0f       	add	r24, r28
 af8:	28 0f       	add	r18, r24
 afa:	31 1d       	adc	r19, r1
 afc:	0e c0       	rjmp	.+28     	; 0xb1a <usbPoll+0x1f6>
 afe:	ac e9       	ldi	r26, 0x9C	; 156
 b00:	b0 e0       	ldi	r27, 0x00	; 0
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 b02:	f9 01       	movw	r30, r18
 b04:	8c 2f       	mov	r24, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 b06:	91 91       	ld	r25, Z+
 b08:	9d 93       	st	X+, r25
                    r++;
                }while(--i);
 b0a:	81 50       	subi	r24, 0x01	; 1
 b0c:	e1 f7       	brne	.-8      	; 0xb06 <usbPoll+0x1e2>
 b0e:	2f 5f       	subi	r18, 0xFF	; 255
 b10:	3f 4f       	sbci	r19, 0xFF	; 255
 b12:	8f ef       	ldi	r24, 0xFF	; 255
 b14:	8c 0f       	add	r24, r28
 b16:	28 0f       	add	r18, r24
 b18:	31 1d       	adc	r19, r1
            }
            usbMsgPtr = r;
 b1a:	30 93 b6 00 	sts	0x00B6, r19	; 0x8000b6 <usbMsgPtr+0x1>
 b1e:	20 93 b5 00 	sts	0x00B5, r18	; 0x8000b5 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 b22:	6c 2f       	mov	r22, r28
 b24:	8c e9       	ldi	r24, 0x9C	; 156
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	0e 94 9e 00 	call	0x13c	; 0x13c <usbCrc16Append>
        len += 4;           /* length including sync byte */
 b2c:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 b2e:	cc 30       	cpi	r28, 0x0C	; 12
 b30:	18 f4       	brcc	.+6      	; 0xb38 <usbPoll+0x214>
            usbMsgLen = USB_NO_MSG;
 b32:	8f ef       	ldi	r24, 0xFF	; 255
 b34:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <usbMsgLen>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 b38:	c0 93 63 00 	sts	0x0063, r28	; 0x800063 <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 b3c:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 b3e:	84 71       	andi	r24, 0x14	; 20
 b40:	91 f4       	brne	.+36     	; 0xb66 <usbPoll+0x242>
 b42:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 b44:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 b46:	84 71       	andi	r24, 0x14	; 20
 b48:	71 f4       	brne	.+28     	; 0xb66 <usbPoll+0x242>
 b4a:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 b4c:	d9 f7       	brne	.-10     	; 0xb44 <usbPoll+0x220>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 b4e:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 b52:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 b56:	07 c0       	rjmp	.+14     	; 0xb66 <usbPoll+0x242>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 b58:	6c 2f       	mov	r22, r28
 b5a:	8c e9       	ldi	r24, 0x9C	; 156
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	0e 94 9e 00 	call	0x13c	; 0x13c <usbCrc16Append>
        len += 4;           /* length including sync byte */
 b62:	cc 5f       	subi	r28, 0xFC	; 252
 b64:	e6 cf       	rjmp	.-52     	; 0xb32 <usbPoll+0x20e>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	08 95       	ret

00000b6c <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 b6c:	85 b7       	in	r24, 0x35	; 53
 b6e:	82 60       	ori	r24, 0x02	; 2
 b70:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 b72:	8b b7       	in	r24, 0x3b	; 59
 b74:	80 64       	ori	r24, 0x40	; 64
 b76:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 b78:	e6 ea       	ldi	r30, 0xA6	; 166
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	8b e4       	ldi	r24, 0x4B	; 75
 b7e:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 b80:	8a e5       	ldi	r24, 0x5A	; 90
 b82:	80 83       	st	Z, r24
 b84:	08 95       	ret

00000b86 <_exit>:
 b86:	f8 94       	cli

00000b88 <__stop_program>:
 b88:	ff cf       	rjmp	.-2      	; 0xb88 <__stop_program>
