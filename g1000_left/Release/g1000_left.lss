
g1000_left.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000afc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000afc  00000b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000073  00800064  00800064  00000b94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000c00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a0  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004fb  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e3  00000000  00000000  000016bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001f9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_1>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	05 01       	movw	r0, r10
  56:	09 05       	cpc	r16, r9
  58:	a1 01       	movw	r20, r2
  5a:	05 09       	sbc	r16, r5
  5c:	19 01       	movw	r2, r18
  5e:	29 20       	and	r2, r9
  60:	15 00       	.word	0x0015	; ????
  62:	25 01       	movw	r4, r10
  64:	75 01       	movw	r14, r10
  66:	95 20       	and	r9, r5
  68:	81 02       	muls	r24, r17
  6a:	05 01       	movw	r0, r10
  6c:	09 36       	cpi	r16, 0x69	; 105
  6e:	15 81       	ldd	r17, Z+5	; 0x05
  70:	25 7f       	andi	r18, 0xF5	; 245
  72:	75 08       	sbc	r7, r5
  74:	95 01       	movw	r18, r10
  76:	81 02       	muls	r24, r17
  78:	c0 09       	Address 0x00000078 is out of bounds.
.word	0xffff	; ????

00000079 <usbDescriptorConfiguration>:
  79:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
  89:	00 00 09 21 01 01 00 01 22 25 00 07 05 81 03 08     ...!...."%......
  99:	00 64                                               .d

0000009b <usbDescriptorDevice>:
  9b:	12 01 10 01 00 00 00 08 c0 16 01 40 00 01 01 02     ...........@....
  ab:	00 01                                               ..

000000ad <usbDescriptorStringDevice>:
  ad:	1a 03 67 00 31 00 30 00 20 30 30 00 5f 00 6c 00     ..g.1.0. 00._.l.
  bd:	65 00 66 00 74 00 20 00 31 00                       e.f.t. .1.

000000c7 <usbDescriptorStringVendor>:
  c7:	08 03 67 00 66 00 65 00                             ..g.f.e.

000000cf <usbDescriptorString0>:
  cf:	04 03 09 04 00                                      .....

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf e5       	ldi	r28, 0x5F	; 95
  da:	d4 e0       	ldi	r29, 0x04	; 4
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	a0 e6       	ldi	r26, 0x60	; 96
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	ec ef       	ldi	r30, 0xFC	; 252
  e8:	fa e0       	ldi	r31, 0x0A	; 10
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a4 36       	cpi	r26, 0x64	; 100
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	a4 e6       	ldi	r26, 0x64	; 100
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a7 3d       	cpi	r26, 0xD7	; 215
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 72 02 	call	0x4e4	; 0x4e4 <main>
 10a:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 112:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 114:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 116:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 118:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 11a:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 11c:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 11e:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 120:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 122:	09 c0       	rjmp	.+18     	; 0x136 <usbCrcLoopEntry>

00000124 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 124:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 126:	82 27       	eor	r24, r18

00000128 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 128:	97 95       	ror	r25
    ror     resCrcL
 12a:	87 95       	ror	r24
    brcs    usbCrcNoXor
 12c:	10 f0       	brcs	.+4      	; 0x132 <usbCrcNoXor>
    eor     resCrcL, polyL
 12e:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 130:	95 27       	eor	r25, r21

00000132 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 132:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 134:	c8 f3       	brcs	.-14     	; 0x128 <usbCrcBitLoop>

00000136 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 136:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 138:	a8 f3       	brcs	.-22     	; 0x124 <usbCrcByteLoop>

0000013a <usbCrcReady>:
usbCrcReady:
    ret
 13a:	08 95       	ret

0000013c <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 13c:	ea df       	rcall	.-44     	; 0x112 <usbCrc16>
    st      ptr+, resCrcL
 13e:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 140:	9d 93       	st	X+, r25
    ret
 142:	08 95       	ret

00000144 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 144:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 146:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 148:	cf 93       	push	r28

0000014a <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 14a:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 14c:	84 9b       	sbis	0x10, 4	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 14e:	e9 f7       	brne	.-6      	; 0x14a <waitForJ>

00000150 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 150:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 152:	09 c0       	rjmp	.+18     	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 154:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 156:	07 c0       	rjmp	.+14     	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 158:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 15a:	05 c0       	rjmp	.+10     	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 15c:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 15e:	03 c0       	rjmp	.+6      	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 160:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 162:	01 c0       	rjmp	.+2      	; 0x166 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 164:	a3 c0       	rjmp	.+326    	; 0x2ac <sofError>

00000166 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 166:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 168:	c0 91 ba 00 	lds	r28, 0x00BA	; 0x8000ba <usbInputBufOffset>
    clr     YH                  ;1 [5]
 16c:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 16e:	cf 53       	subi	r28, 0x3F	; 63
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 170:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 172:	84 9b       	sbis	0x10, 4	; 16
    rjmp    haveTwoBitsK    ;2 [10]
 174:	02 c0       	rjmp	.+4      	; 0x17a <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 176:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 178:	eb cf       	rjmp	.-42     	; 0x150 <waitForK>

0000017a <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 17a:	2f 93       	push	r18
    push    x1              ;2 [12]
 17c:	0f 93       	push	r16
    push    x2              ;2 [14]
 17e:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 180:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
 182:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 184:	04 fb       	bst	r16, 4
    bld     shift, 0        ;1 [20]
 186:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 188:	4f 93       	push	r20
    push    cnt             ;2 [24]
 18a:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 18c:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
 18e:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 190:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 192:	04 fb       	bst	r16, 4
    bld     shift, 1        ;1 [29]
 194:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 196:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 198:	31 c0       	rjmp	.+98     	; 0x1fc <rxbit2>

0000019a <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 19a:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 19c:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 19e:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
 1a0:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 1a2:	28 c0       	rjmp	.+80     	; 0x1f4 <didUnstuff0>

000001a4 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 1a4:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 1a6:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 1a8:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 1aa:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 1ac:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
 1ae:	29 c0       	rjmp	.+82     	; 0x202 <didUnstuff1>

000001b0 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 1b0:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 1b2:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 1b4:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 1b6:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 1b8:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
 1ba:	2b c0       	rjmp	.+86     	; 0x212 <didUnstuff2>

000001bc <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 1bc:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
 1be:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 1c0:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 1c2:	2a c0       	rjmp	.+84     	; 0x218 <didUnstuff3>

000001c4 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 1c4:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 1c6:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
 1c8:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 1ca:	2c c0       	rjmp	.+88     	; 0x224 <didUnstuff4>

000001cc <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 1cc:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 1ce:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
 1d0:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 1d2:	2f c0       	rjmp	.+94     	; 0x232 <didUnstuff5>

000001d4 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 1d4:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 1d6:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
 1d8:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 1da:	32 c0       	rjmp	.+100    	; 0x240 <didUnstuff6>

000001dc <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 1dc:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 1de:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
 1e0:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 1e2:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 1e4:	00 00       	nop
    eor     x2, x1      ;1 [6]
 1e6:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 1e8:	14 fb       	bst	r17, 4
    bld     shift, 0    ;1 [8]
 1ea:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 1ec:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
 1ee:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;1 [11] SE0 check for bit 1
 1f0:	c9 f1       	breq	.+114    	; 0x264 <se0>
    andi    shift, 0xf9 ;1 [12]
 1f2:	29 7f       	andi	r18, 0xF9	; 249

000001f4 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 1f4:	91 f2       	breq	.-92     	; 0x19a <unstuff0>
    eor     x1, x2      ;1 [14]
 1f6:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 1f8:	04 fb       	bst	r16, 4
    bld     shift, 1    ;1 [16]
 1fa:	21 f9       	bld	r18, 1

000001fc <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 1fc:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
 1fe:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 200:	89 f2       	breq	.-94     	; 0x1a4 <unstuff1>

00000202 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 202:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 204:	58 f1       	brcs	.+86     	; 0x25c <overflow>
    eor     x2, x1      ;1 [22]
 206:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 208:	14 fb       	bst	r17, 4
    bld     shift, 2    ;1 [24]
 20a:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 20c:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
 20e:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 210:	79 f2       	breq	.-98     	; 0x1b0 <unstuff2>

00000212 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 212:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 214:	04 fb       	bst	r16, 4
    bld     shift, 3    ;1 [30]
 216:	23 f9       	bld	r18, 3

00000218 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 218:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 21a:	81 f2       	breq	.-96     	; 0x1bc <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 21c:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
 21e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 220:	14 fb       	bst	r17, 4
    bld     shift, 4    ;1 [36]
 222:	24 f9       	bld	r18, 4

00000224 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 224:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 226:	71 f2       	breq	.-100    	; 0x1c4 <unstuff4>
    nop2                ;2 [40]
 228:	00 c0       	rjmp	.+0      	; 0x22a <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 22a:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
 22c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 22e:	04 fb       	bst	r16, 4
    bld     shift, 5    ;1 [44]
 230:	25 f9       	bld	r18, 5

00000232 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 232:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 234:	59 f2       	breq	.-106    	; 0x1cc <unstuff5>
    nop2                ;2 [48]
 236:	00 c0       	rjmp	.+0      	; 0x238 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 238:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
 23a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 23c:	14 fb       	bst	r17, 4
    bld     shift, 6    ;1 [52]
 23e:	26 f9       	bld	r18, 6

00000240 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 240:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 242:	40 f2       	brcs	.-112    	; 0x1d4 <unstuff6>
    nop2                ;2 [56]
 244:	00 c0       	rjmp	.+0      	; 0x246 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 246:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
 248:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 24a:	04 fb       	bst	r16, 4
    bld     shift, 7    ;1 [60]
 24c:	27 f9       	bld	r18, 7

0000024e <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 24e:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 250:	28 f6       	brcc	.-118    	; 0x1dc <rxLoop>

00000252 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 252:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 254:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 256:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
 258:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 25a:	f9 cf       	rjmp	.-14     	; 0x24e <didUnstuff7>

0000025c <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 25c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 25e:	1a bf       	out	0x3a, r17	; 58

00000260 <ignorePacket>:
ignorePacket:
    clr     token
 260:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 262:	19 c0       	rjmp	.+50     	; 0x296 <handleSetupOrOut>

00000264 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 264:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 266:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 268:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 26a:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 26c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 26e:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 270:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 272:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 274:	f9 f0       	breq	.+62     	; 0x2b4 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 276:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 278:	e9 f0       	breq	.+58     	; 0x2b4 <handleData>
    lds     shift, usbDeviceAddr;[17]
 27a:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 27e:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 280:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 282:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 284:	ed cf       	rjmp	.-38     	; 0x260 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 286:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 288:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 28a:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 28c:	41 f1       	breq	.+80     	; 0x2de <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 28e:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 290:	11 f0       	breq	.+4      	; 0x296 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 292:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 294:	29 f7       	brne	.-54     	; 0x260 <ignorePacket>

00000296 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 296:	00 93 bf 00 	sts	0x00BF, r16	; 0x8000bf <usbCurrentTok>

0000029a <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 29a:	3f 91       	pop	r19
 29c:	4f 91       	pop	r20
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	2f 91       	pop	r18
 2a4:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 2a6:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 2a8:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 2aa:	4f cf       	rjmp	.-354    	; 0x14a <waitForJ>

000002ac <sofError>:
sofError:
    POP_RETI                    ;macro call
 2ac:	cf 91       	pop	r28
 2ae:	cf bf       	out	0x3f, r28	; 63
 2b0:	cf 91       	pop	r28
    reti
 2b2:	18 95       	reti

000002b4 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 2b4:	20 91 bf 00 	lds	r18, 0x00BF	; 0x8000bf <usbCurrentTok>
    tst     shift               ;[20]
 2b8:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 2ba:	79 f3       	breq	.-34     	; 0x29a <doReturn>
    lds     x2, usbRxLen        ;[22]
 2bc:	10 91 bd 00 	lds	r17, 0x00BD	; 0x8000bd <usbRxLen>
    tst     x2                  ;[24]
 2c0:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 2c2:	69 f5       	brne	.+90     	; 0x31e <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 2c4:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 2c6:	6a f1       	brmi	.+90     	; 0x322 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 2c8:	30 93 bd 00 	sts	0x00BD, r19	; 0x8000bd <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 2cc:	20 93 b9 00 	sts	0x00B9, r18	; 0x8000b9 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 2d0:	10 91 ba 00 	lds	r17, 0x00BA	; 0x8000ba <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 2d4:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 2d6:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 2d8:	30 93 ba 00 	sts	0x00BA, r19	; 0x8000ba <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 2dc:	22 c0       	rjmp	.+68     	; 0x322 <sendAckAndReti>

000002de <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 2de:	00 91 bd 00 	lds	r16, 0x00BD	; 0x8000bd <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 2e2:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 2e4:	e4 f4       	brge	.+56     	; 0x31e <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 2e6:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 2e8:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 2ea:	49 f4       	brne	.+18     	; 0x2fe <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 2ec:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 2f0:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 2f2:	19 c0       	rjmp	.+50     	; 0x326 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 2f4:	00 93 63 00 	sts	0x0063, r16	; 0x800063 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 2f8:	c1 ea       	ldi	r28, 0xA1	; 161
    ldi     YH, hi8(usbTxBuf)   ;[44]
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 2fc:	18 c0       	rjmp	.+48     	; 0x32e <usbSendAndReti>

000002fe <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 2fe:	30 91 ac 00 	lds	r19, 0x00AC	; 0x8000ac <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 302:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 304:	10 c0       	rjmp	.+32     	; 0x326 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 306:	00 93 ac 00 	sts	0x00AC, r16	; 0x8000ac <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 30a:	cd ea       	ldi	r28, 0xAD	; 173
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 30c:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 30e:	0f c0       	rjmp	.+30     	; 0x32e <usbSendAndReti>

00000310 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 310:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 312:	a8 f4       	brcc	.+42     	; 0x33e <doExorN1>
    subi    x4, 1               ;[-3]
 314:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 316:	a9 f4       	brne	.+42     	; 0x342 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 318:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 31a:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 31c:	f9 cf       	rjmp	.-14     	; 0x310 <stuffN1Delay>

0000031e <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 31e:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 320:	03 c0       	rjmp	.+6      	; 0x328 <usbSendX3>

00000322 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 322:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 324:	01 c0       	rjmp	.+2      	; 0x328 <usbSendX3>

00000326 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 326:	43 2f       	mov	r20, r19

00000328 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 328:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 32a:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 32c:	32 e0       	ldi	r19, 0x02	; 2

0000032e <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 32e:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK         ;[-11]
 330:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 332:	94 9a       	sbi	0x12, 4	; 18
    out     USBDDR, x2          ;[-8] <--- acquire bus
 334:	11 bb       	out	0x11, r17	; 17
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 336:	02 b3       	in	r16, 0x12	; 18
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 338:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 33a:	14 e1       	ldi	r17, 0x14	; 20
    push    x4                  ;[-4]
 33c:	5f 93       	push	r21

0000033e <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 33e:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 340:	56 e0       	ldi	r21, 0x06	; 6

00000342 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 342:	02 bb       	out	0x12, r16	; 18
    ror     shift               ;[01]
 344:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 346:	20 f4       	brcc	.+8      	; 0x350 <doExorN2>
    subi    x4, 1               ;[03]
 348:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 34a:	21 f4       	brne	.+8      	; 0x354 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 34c:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 34e:	f9 cf       	rjmp	.-14     	; 0x342 <commonN1>

00000350 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 350:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 352:	56 e0       	ldi	r21, 0x06	; 6

00000354 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 354:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 356:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 358:	02 bb       	out	0x12, r16	; 18
    brcs    txBitloop           ;[09]      [25] [41]
 35a:	d0 f2       	brcs	.-76     	; 0x310 <stuffN1Delay>

0000035c <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 35c:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 35e:	28 f4       	brcc	.+10     	; 0x36a <doExor6>
    subi    x4, 1               ;[44]
 360:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 362:	29 f4       	brne	.+10     	; 0x36e <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 364:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 366:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 368:	f9 cf       	rjmp	.-14     	; 0x35c <stuff6Delay>

0000036a <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 36a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 36c:	56 e0       	ldi	r21, 0x06	; 6

0000036e <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 36e:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 370:	02 bb       	out	0x12, r16	; 18
    brcc    doExor7             ;[49]
 372:	20 f4       	brcc	.+8      	; 0x37c <doExor7>
    subi    x4, 1               ;[50]
 374:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 376:	21 f4       	brne	.+8      	; 0x380 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 378:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 37a:	f9 cf       	rjmp	.-14     	; 0x36e <common6>

0000037c <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 37c:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 37e:	56 e0       	ldi	r21, 0x06	; 6

00000380 <common7>:
common7:
    ld      shift, y+           ;[53]
 380:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 382:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 384:	02 bb       	out	0x12, r16	; 18
    brne    txByteLoop          ;[57]
 386:	21 f6       	brne	.-120    	; 0x310 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 388:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[59]
 38a:	10 91 be 00 	lds	r17, 0x00BE	; 0x8000be <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
 38e:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 390:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 392:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 394:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 396:	11 f0       	breq	.+4      	; 0x39c <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 398:	10 93 b8 00 	sts	0x00B8, r17	; 0x8000b8 <usbDeviceAddr>

0000039c <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 39c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 39e:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 3a0:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR          ;[06]
 3a2:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK         ;[07] set both pins to input
 3a4:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1              ;[08]
 3a6:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 3a8:	4b 7e       	andi	r20, 0xEB	; 235
    pop     x4                  ;[10]
 3aa:	5f 91       	pop	r21
    nop2                        ;[12]
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <skipAddrAssign+0x12>
    nop2                        ;[14]
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 3b0:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2          ;[17] <-- release bus now
 3b2:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 3b4:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 3b6:	71 cf       	rjmp	.-286    	; 0x29a <doReturn>

000003b8 <usbFunctionSetup>:
 3b8:	fc 01       	movw	r30, r24
 3ba:	80 81       	ld	r24, Z
 3bc:	80 76       	andi	r24, 0x60	; 96
 3be:	80 32       	cpi	r24, 0x20	; 32
 3c0:	d1 f4       	brne	.+52     	; 0x3f6 <usbFunctionSetup+0x3e>
 3c2:	81 81       	ldd	r24, Z+1	; 0x01
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	41 f4       	brne	.+16     	; 0x3d8 <usbFunctionSetup+0x20>
 3c8:	87 e6       	ldi	r24, 0x67	; 103
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <usbMsgPtr+0x1>
 3d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <usbMsgPtr>
 3d4:	84 e0       	ldi	r24, 0x04	; 4
 3d6:	08 95       	ret
 3d8:	82 30       	cpi	r24, 0x02	; 2
 3da:	41 f4       	brne	.+16     	; 0x3ec <usbFunctionSetup+0x34>
 3dc:	86 e6       	ldi	r24, 0x66	; 102
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <usbMsgPtr+0x1>
 3e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <usbMsgPtr>
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	08 95       	ret
 3ec:	8a 30       	cpi	r24, 0x0A	; 10
 3ee:	19 f4       	brne	.+6      	; 0x3f6 <usbFunctionSetup+0x3e>
 3f0:	83 81       	ldd	r24, Z+3	; 0x03
 3f2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <idleRate>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret

000003fa <ReadButton>:
 3fa:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 3fe:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 402:	ef 57       	subi	r30, 0x7F	; 127
 404:	ff 4f       	sbci	r31, 0xFF	; 255
 406:	80 81       	ld	r24, Z
 408:	98 2f       	mov	r25, r24
 40a:	93 70       	andi	r25, 0x03	; 3
 40c:	28 2f       	mov	r18, r24
 40e:	2c 70       	andi	r18, 0x0C	; 12
 410:	26 95       	lsr	r18
 412:	26 95       	lsr	r18
 414:	29 17       	cp	r18, r25
 416:	59 f0       	breq	.+22     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
 420:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
 424:	99 0f       	add	r25, r25
 426:	99 0f       	add	r25, r25
 428:	83 7f       	andi	r24, 0xF3	; 243
 42a:	89 2b       	or	r24, r25
 42c:	80 83       	st	Z, r24
 42e:	08 95       	ret

00000430 <ReadEncoder>:
 430:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 434:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 438:	e4 59       	subi	r30, 0x94	; 148
 43a:	ff 4f       	sbci	r31, 0xFF	; 255
 43c:	80 81       	ld	r24, Z
 43e:	28 2f       	mov	r18, r24
 440:	2c 70       	andi	r18, 0x0C	; 12
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	35 95       	asr	r19
 446:	27 95       	ror	r18
 448:	35 95       	asr	r19
 44a:	27 95       	ror	r18
 44c:	48 2f       	mov	r20, r24
 44e:	43 70       	andi	r20, 0x03	; 3
 450:	42 17       	cp	r20, r18
 452:	29 f1       	breq	.+74     	; 0x49e <__stack+0x3f>
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__data_start+0x1>
 45c:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__data_start>
 460:	22 0f       	add	r18, r18
 462:	28 27       	eor	r18, r24
 464:	23 70       	andi	r18, 0x03	; 3
 466:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Dets>
 46a:	22 30       	cpi	r18, 0x02	; 2
 46c:	30 f0       	brcs	.+12     	; 0x47a <__stack+0x1b>
 46e:	93 30       	cpi	r25, 0x03	; 3
 470:	10 f4       	brcc	.+4      	; 0x476 <__stack+0x17>
 472:	80 64       	ori	r24, 0x40	; 64
 474:	05 c0       	rjmp	.+10     	; 0x480 <__stack+0x21>
 476:	80 61       	ori	r24, 0x10	; 16
 478:	09 c0       	rjmp	.+18     	; 0x48c <__stack+0x2d>
 47a:	93 30       	cpi	r25, 0x03	; 3
 47c:	30 f4       	brcc	.+12     	; 0x48a <__stack+0x2b>
 47e:	80 68       	ori	r24, 0x80	; 128
 480:	80 83       	st	Z, r24
 482:	9f 5f       	subi	r25, 0xFF	; 255
 484:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Dets>
 488:	04 c0       	rjmp	.+8      	; 0x492 <__stack+0x33>
 48a:	80 62       	ori	r24, 0x20	; 32
 48c:	80 83       	st	Z, r24
 48e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Dets>
 492:	80 81       	ld	r24, Z
 494:	83 7f       	andi	r24, 0xF3	; 243
 496:	44 0f       	add	r20, r20
 498:	44 0f       	add	r20, r20
 49a:	48 2b       	or	r20, r24
 49c:	40 83       	st	Z, r20
 49e:	08 95       	ret

000004a0 <ReadAnalog>:
 4a0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 4a4:	8f 70       	andi	r24, 0x0F	; 15
 4a6:	80 66       	ori	r24, 0x60	; 96
 4a8:	87 b9       	out	0x07, r24	; 7
 4aa:	87 ec       	ldi	r24, 0xC7	; 199
 4ac:	86 b9       	out	0x06, r24	; 6
 4ae:	36 99       	sbic	0x06, 6	; 6
 4b0:	fe cf       	rjmp	.-4      	; 0x4ae <ReadAnalog+0xe>
 4b2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 4b6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 4ba:	fc 01       	movw	r30, r24
 4bc:	e7 58       	subi	r30, 0x87	; 135
 4be:	ff 4f       	sbci	r31, 0xFF	; 255
 4c0:	06 97       	sbiw	r24, 0x06	; 6
 4c2:	14 f0       	brlt	.+4      	; 0x4c8 <ReadAnalog+0x28>
 4c4:	84 b1       	in	r24, 0x04	; 4
 4c6:	80 87       	std	Z+8, r24	; 0x08
 4c8:	85 b1       	in	r24, 0x05	; 5
 4ca:	80 83       	st	Z, r24
 4cc:	08 95       	ret

000004ce <init_TC1>:
 4ce:	8e b5       	in	r24, 0x2e	; 46
 4d0:	88 60       	ori	r24, 0x08	; 8
 4d2:	8e bd       	out	0x2e, r24	; 46
 4d4:	8e b5       	in	r24, 0x2e	; 46
 4d6:	85 60       	ori	r24, 0x05	; 5
 4d8:	8e bd       	out	0x2e, r24	; 46
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	93 e0       	ldi	r25, 0x03	; 3
 4de:	9b bd       	out	0x2b, r25	; 43
 4e0:	8a bd       	out	0x2a, r24	; 42
 4e2:	08 95       	ret

000004e4 <main>:
 4e4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <enc>
 4e8:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <enc+0x1>
 4ec:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <enc+0x2>
 4f0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <enc+0x3>
 4f4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <enc+0x4>
 4f8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <enc+0x5>
 4fc:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <enc+0x6>
 500:	0e 94 67 02 	call	0x4ce	; 0x4ce <init_TC1>
 504:	9e e0       	ldi	r25, 0x0E	; 14
 506:	88 e1       	ldi	r24, 0x18	; 24
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	f8 94       	cli
 50c:	a8 95       	wdr
 50e:	81 bd       	out	0x21, r24	; 33
 510:	0f be       	out	0x3f, r0	; 63
 512:	91 bd       	out	0x21, r25	; 33
 514:	0e 94 6f 05 	call	0xade	; 0xade <usbInit>
 518:	8c 9a       	sbi	0x11, 4	; 17
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	81 50       	subi	r24, 0x01	; 1
 51e:	41 f0       	breq	.+16     	; 0x530 <main+0x4c>
 520:	a8 95       	wdr
 522:	e7 eb       	ldi	r30, 0xB7	; 183
 524:	fb e0       	ldi	r31, 0x0B	; 11
 526:	31 97       	sbiw	r30, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <main+0x42>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <main+0x48>
 52c:	00 00       	nop
 52e:	f6 cf       	rjmp	.-20     	; 0x51c <main+0x38>
 530:	8c 98       	cbi	0x11, 4	; 17
 532:	78 94       	sei
 534:	cf ef       	ldi	r28, 0xFF	; 255
 536:	d1 e0       	ldi	r29, 0x01	; 1
 538:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 53c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
 540:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 544:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 548:	97 ff       	sbrs	r25, 7
 54a:	0c c0       	rjmp	.+24     	; 0x564 <main+0x80>
 54c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <ReadButton>
 550:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 554:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 55e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 562:	ee cf       	rjmp	.-36     	; 0x540 <main+0x5c>
 564:	8a b3       	in	r24, 0x1a	; 26
 566:	1a ba       	out	0x1a, r1	; 26
 568:	87 b3       	in	r24, 0x17	; 23
 56a:	17 ba       	out	0x17, r1	; 23
 56c:	84 b3       	in	r24, 0x14	; 20
 56e:	14 ba       	out	0x14, r1	; 20
 570:	81 b3       	in	r24, 0x11	; 17
 572:	11 ba       	out	0x11, r1	; 17
 574:	8b b3       	in	r24, 0x1b	; 27
 576:	8f 6d       	ori	r24, 0xDF	; 223
 578:	8b bb       	out	0x1b, r24	; 27
 57a:	88 b3       	in	r24, 0x18	; 24
 57c:	c8 bb       	out	0x18, r28	; 24
 57e:	85 b3       	in	r24, 0x15	; 21
 580:	c5 bb       	out	0x15, r28	; 21
 582:	82 b3       	in	r24, 0x12	; 18
 584:	8b 6e       	ori	r24, 0xEB	; 235
 586:	82 bb       	out	0x12, r24	; 18
 588:	80 b3       	in	r24, 0x10	; 16
 58a:	20 b3       	in	r18, 0x10	; 16
 58c:	88 70       	andi	r24, 0x08	; 8
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	95 95       	asr	r25
 592:	87 95       	ror	r24
 594:	95 95       	asr	r25
 596:	87 95       	ror	r24
 598:	25 fb       	bst	r18, 5
 59a:	99 27       	eor	r25, r25
 59c:	90 f9       	bld	r25, 0
 59e:	89 2b       	or	r24, r25
 5a0:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <enc>
 5a4:	9c 70       	andi	r25, 0x0C	; 12
 5a6:	89 2b       	or	r24, r25
 5a8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <enc>
 5ac:	96 b3       	in	r25, 0x16	; 22
 5ae:	30 b3       	in	r19, 0x10	; 16
 5b0:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <enc+0x1>
 5b4:	2c 70       	andi	r18, 0x0C	; 12
 5b6:	83 2f       	mov	r24, r19
 5b8:	81 70       	andi	r24, 0x01	; 1
 5ba:	28 2b       	or	r18, r24
 5bc:	90 78       	andi	r25, 0x80	; 128
 5be:	89 2f       	mov	r24, r25
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	46 e0       	ldi	r20, 0x06	; 6
 5c4:	95 95       	asr	r25
 5c6:	87 95       	ror	r24
 5c8:	4a 95       	dec	r20
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <main+0xe0>
 5cc:	82 2b       	or	r24, r18
 5ce:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <enc+0x1>
 5d2:	86 b3       	in	r24, 0x16	; 22
 5d4:	26 b3       	in	r18, 0x16	; 22
 5d6:	80 72       	andi	r24, 0x20	; 32
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	54 e0       	ldi	r21, 0x04	; 4
 5dc:	95 95       	asr	r25
 5de:	87 95       	ror	r24
 5e0:	5a 95       	dec	r21
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0xf8>
 5e4:	26 fb       	bst	r18, 6
 5e6:	99 27       	eor	r25, r25
 5e8:	90 f9       	bld	r25, 0
 5ea:	89 2b       	or	r24, r25
 5ec:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <enc+0x2>
 5f0:	9c 70       	andi	r25, 0x0C	; 12
 5f2:	89 2b       	or	r24, r25
 5f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <enc+0x2>
 5f8:	89 b3       	in	r24, 0x19	; 25
 5fa:	29 b3       	in	r18, 0x19	; 25
 5fc:	80 78       	andi	r24, 0x80	; 128
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	66 e0       	ldi	r22, 0x06	; 6
 602:	95 95       	asr	r25
 604:	87 95       	ror	r24
 606:	6a 95       	dec	r22
 608:	e1 f7       	brne	.-8      	; 0x602 <main+0x11e>
 60a:	26 fb       	bst	r18, 6
 60c:	99 27       	eor	r25, r25
 60e:	90 f9       	bld	r25, 0
 610:	89 2b       	or	r24, r25
 612:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <enc+0x3>
 616:	9c 70       	andi	r25, 0x0C	; 12
 618:	89 2b       	or	r24, r25
 61a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <enc+0x3>
 61e:	86 b3       	in	r24, 0x16	; 22
 620:	26 b3       	in	r18, 0x16	; 22
 622:	88 70       	andi	r24, 0x08	; 8
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	95 95       	asr	r25
 628:	87 95       	ror	r24
 62a:	95 95       	asr	r25
 62c:	87 95       	ror	r24
 62e:	22 fb       	bst	r18, 2
 630:	99 27       	eor	r25, r25
 632:	90 f9       	bld	r25, 0
 634:	89 2b       	or	r24, r25
 636:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <enc+0x4>
 63a:	9c 70       	andi	r25, 0x0C	; 12
 63c:	89 2b       	or	r24, r25
 63e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <enc+0x4>
 642:	83 b3       	in	r24, 0x13	; 19
 644:	26 b3       	in	r18, 0x16	; 22
 646:	84 70       	andi	r24, 0x04	; 4
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	95 95       	asr	r25
 64c:	87 95       	ror	r24
 64e:	21 fb       	bst	r18, 1
 650:	99 27       	eor	r25, r25
 652:	90 f9       	bld	r25, 0
 654:	89 2b       	or	r24, r25
 656:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <enc+0x5>
 65a:	9c 70       	andi	r25, 0x0C	; 12
 65c:	89 2b       	or	r24, r25
 65e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <enc+0x5>
 662:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 666:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
 66a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 66e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 672:	06 97       	sbiw	r24, 0x06	; 6
 674:	64 f4       	brge	.+24     	; 0x68e <main+0x1aa>
 676:	0e 94 18 02 	call	0x430	; 0x430 <ReadEncoder>
 67a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 67e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 688:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 68c:	ee cf       	rjmp	.-36     	; 0x66a <main+0x186>
 68e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 692:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
 696:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 69a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 69e:	97 ff       	sbrs	r25, 7
 6a0:	0c c0       	rjmp	.+24     	; 0x6ba <main+0x1d6>
 6a2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ReadAnalog>
 6a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 6aa:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 6ae:	01 96       	adiw	r24, 0x01	; 1
 6b0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 6b4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 6b8:	ee cf       	rjmp	.-36     	; 0x696 <main+0x1b2>
 6ba:	46 b3       	in	r20, 0x16	; 22
 6bc:	30 b3       	in	r19, 0x10	; 16
 6be:	93 b3       	in	r25, 0x13	; 19
 6c0:	23 b3       	in	r18, 0x13	; 19
 6c2:	83 b3       	in	r24, 0x13	; 19
 6c4:	73 b3       	in	r23, 0x13	; 19
 6c6:	63 b3       	in	r22, 0x13	; 19
 6c8:	53 b3       	in	r21, 0x13	; 19
 6ca:	28 70       	andi	r18, 0x08	; 8
 6cc:	20 95       	com	r18
 6ce:	28 70       	andi	r18, 0x08	; 8
 6d0:	80 71       	andi	r24, 0x10	; 16
 6d2:	80 95       	com	r24
 6d4:	80 71       	andi	r24, 0x10	; 16
 6d6:	28 2b       	or	r18, r24
 6d8:	70 72       	andi	r23, 0x20	; 32
 6da:	70 95       	com	r23
 6dc:	70 72       	andi	r23, 0x20	; 32
 6de:	27 2b       	or	r18, r23
 6e0:	60 74       	andi	r22, 0x40	; 64
 6e2:	60 95       	com	r22
 6e4:	60 74       	andi	r22, 0x40	; 64
 6e6:	26 2b       	or	r18, r22
 6e8:	50 78       	andi	r21, 0x80	; 128
 6ea:	50 95       	com	r21
 6ec:	50 78       	andi	r21, 0x80	; 128
 6ee:	25 2b       	or	r18, r21
 6f0:	40 71       	andi	r20, 0x10	; 16
 6f2:	50 e0       	ldi	r21, 0x00	; 0
 6f4:	40 95       	com	r20
 6f6:	50 95       	com	r21
 6f8:	42 95       	swap	r20
 6fa:	41 70       	andi	r20, 0x01	; 1
 6fc:	82 2f       	mov	r24, r18
 6fe:	84 2b       	or	r24, r20
 700:	30 74       	andi	r19, 0x40	; 64
 702:	23 2f       	mov	r18, r19
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	20 95       	com	r18
 708:	30 95       	com	r19
 70a:	20 74       	andi	r18, 0x40	; 64
 70c:	33 27       	eor	r19, r19
 70e:	a5 e0       	ldi	r26, 0x05	; 5
 710:	35 95       	asr	r19
 712:	27 95       	ror	r18
 714:	aa 95       	dec	r26
 716:	e1 f7       	brne	.-8      	; 0x710 <main+0x22c>
 718:	28 2b       	or	r18, r24
 71a:	92 70       	andi	r25, 0x02	; 2
 71c:	89 2f       	mov	r24, r25
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	80 95       	com	r24
 722:	90 95       	com	r25
 724:	82 70       	andi	r24, 0x02	; 2
 726:	99 27       	eor	r25, r25
 728:	88 0f       	add	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	82 2b       	or	r24, r18
 72e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <reportBuffer>
 732:	e6 b3       	in	r30, 0x16	; 22
 734:	e1 70       	andi	r30, 0x01	; 1
 736:	8e 2f       	mov	r24, r30
 738:	8d 27       	eor	r24, r29
 73a:	c8 9b       	sbis	0x19, 0	; 25
 73c:	02 c0       	rjmp	.+4      	; 0x742 <main+0x25e>
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	01 c0       	rjmp	.+2      	; 0x744 <main+0x260>
 742:	62 e0       	ldi	r22, 0x02	; 2
 744:	a9 b3       	in	r26, 0x19	; 25
 746:	79 b3       	in	r23, 0x19	; 25
 748:	59 b3       	in	r21, 0x19	; 25
 74a:	39 b3       	in	r19, 0x19	; 25
 74c:	90 b3       	in	r25, 0x10	; 16
 74e:	a2 70       	andi	r26, 0x02	; 2
 750:	b0 e0       	ldi	r27, 0x00	; 0
 752:	a0 95       	com	r26
 754:	b0 95       	com	r27
 756:	a2 70       	andi	r26, 0x02	; 2
 758:	bb 27       	eor	r27, r27
 75a:	aa 0f       	add	r26, r26
 75c:	bb 1f       	adc	r27, r27
 75e:	74 70       	andi	r23, 0x04	; 4
 760:	e7 2f       	mov	r30, r23
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	e0 95       	com	r30
 766:	f0 95       	com	r31
 768:	e4 70       	andi	r30, 0x04	; 4
 76a:	ff 27       	eor	r31, r31
 76c:	ee 0f       	add	r30, r30
 76e:	ff 1f       	adc	r31, r31
 770:	ea 2b       	or	r30, r26
 772:	e8 2b       	or	r30, r24
 774:	58 70       	andi	r21, 0x08	; 8
 776:	45 2f       	mov	r20, r21
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	40 95       	com	r20
 77c:	50 95       	com	r21
 77e:	48 70       	andi	r20, 0x08	; 8
 780:	55 27       	eor	r21, r21
 782:	44 0f       	add	r20, r20
 784:	55 1f       	adc	r21, r21
 786:	8e 2f       	mov	r24, r30
 788:	84 2b       	or	r24, r20
 78a:	30 71       	andi	r19, 0x10	; 16
 78c:	23 2f       	mov	r18, r19
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	20 95       	com	r18
 792:	30 95       	com	r19
 794:	20 71       	andi	r18, 0x10	; 16
 796:	33 27       	eor	r19, r19
 798:	22 0f       	add	r18, r18
 79a:	33 1f       	adc	r19, r19
 79c:	28 2b       	or	r18, r24
 79e:	92 70       	andi	r25, 0x02	; 2
 7a0:	89 2f       	mov	r24, r25
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	80 95       	com	r24
 7a6:	90 95       	com	r25
 7a8:	82 70       	andi	r24, 0x02	; 2
 7aa:	99 27       	eor	r25, r25
 7ac:	f5 e0       	ldi	r31, 0x05	; 5
 7ae:	88 0f       	add	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	fa 95       	dec	r31
 7b4:	e1 f7       	brne	.-8      	; 0x7ae <main+0x2ca>
 7b6:	82 2b       	or	r24, r18
 7b8:	86 2b       	or	r24, r22
 7ba:	98 9b       	sbis	0x13, 0	; 19
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <main+0x2de>
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <main+0x2e0>
 7c2:	60 e8       	ldi	r22, 0x80	; 128
 7c4:	86 2b       	or	r24, r22
 7c6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <reportBuffer+0x1>
 7ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 7ce:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	a9 f5       	brne	.+106    	; 0x840 <main+0x35c>
 7d6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <enc+0x3>
 7da:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <enc>
 7de:	32 95       	swap	r19
 7e0:	36 95       	lsr	r19
 7e2:	36 95       	lsr	r19
 7e4:	33 70       	andi	r19, 0x03	; 3
 7e6:	58 2f       	mov	r21, r24
 7e8:	50 7c       	andi	r21, 0xC0	; 192
 7ea:	43 2f       	mov	r20, r19
 7ec:	45 2b       	or	r20, r21
 7ee:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <enc+0x1>
 7f2:	20 7c       	andi	r18, 0xC0	; 192
 7f4:	22 95       	swap	r18
 7f6:	2f 70       	andi	r18, 0x0F	; 15
 7f8:	32 2f       	mov	r19, r18
 7fa:	34 2b       	or	r19, r20
 7fc:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <enc+0x2>
 800:	20 7c       	andi	r18, 0xC0	; 192
 802:	26 95       	lsr	r18
 804:	26 95       	lsr	r18
 806:	23 2b       	or	r18, r19
 808:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <reportBuffer+0x2>
 80c:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <enc+0x4>
 810:	20 7c       	andi	r18, 0xC0	; 192
 812:	80 73       	andi	r24, 0x30	; 48
 814:	82 2b       	or	r24, r18
 816:	82 95       	swap	r24
 818:	8f 70       	andi	r24, 0x0F	; 15
 81a:	98 2f       	mov	r25, r24
 81c:	90 6c       	ori	r25, 0xC0	; 192
 81e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <enc+0x5>
 822:	80 7c       	andi	r24, 0xC0	; 192
 824:	86 95       	lsr	r24
 826:	86 95       	lsr	r24
 828:	89 2b       	or	r24, r25
 82a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <reportBuffer+0x3>
 82e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 832:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 836:	88 b7       	in	r24, 0x38	; 56
 838:	80 61       	ori	r24, 0x10	; 16
 83a:	88 bf       	out	0x38, r24	; 56
 83c:	1d bc       	out	0x2d, r1	; 45
 83e:	1c bc       	out	0x2c, r1	; 44
 840:	87 eb       	ldi	r24, 0xB7	; 183
 842:	9b e0       	ldi	r25, 0x0B	; 11
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	f1 f7       	brne	.-4      	; 0x844 <main+0x360>
 848:	00 c0       	rjmp	.+0      	; 0x84a <main+0x366>
 84a:	00 00       	nop
 84c:	08 b6       	in	r0, 0x38	; 56
 84e:	04 fe       	sbrs	r0, 4
 850:	09 c0       	rjmp	.+18     	; 0x864 <main+0x380>
 852:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <reportBuffer+0x2>
 856:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <reportBuffer+0x3>
 85a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Dets>
 85e:	88 b7       	in	r24, 0x38	; 56
 860:	80 61       	ori	r24, 0x10	; 16
 862:	88 bf       	out	0x38, r24	; 56
 864:	a8 95       	wdr
 866:	0e 94 62 04 	call	0x8c4	; 0x8c4 <usbPoll>
 86a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <usbTxStatus1>
 86e:	84 ff       	sbrs	r24, 4
 870:	63 ce       	rjmp	.-826    	; 0x538 <main+0x54>
 872:	64 e0       	ldi	r22, 0x04	; 4
 874:	87 e6       	ldi	r24, 0x67	; 103
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 3f 04 	call	0x87e	; 0x87e <usbSetInterrupt>
 87c:	5d ce       	rjmp	.-838    	; 0x538 <main+0x54>

0000087e <usbSetInterrupt>:
 87e:	cf 93       	push	r28
 880:	c6 2f       	mov	r28, r22
 882:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <usbTxStatus1>
 886:	24 ff       	sbrs	r18, 4
 888:	0b c0       	rjmp	.+22     	; 0x8a0 <usbSetInterrupt+0x22>
 88a:	30 91 ad 00 	lds	r19, 0x00AD	; 0x8000ad <usbTxStatus1+0x1>
 88e:	28 e8       	ldi	r18, 0x88	; 136
 890:	23 27       	eor	r18, r19
 892:	20 93 ad 00 	sts	0x00AD, r18	; 0x8000ad <usbTxStatus1+0x1>
 896:	fc 01       	movw	r30, r24
 898:	ae ea       	ldi	r26, 0xAE	; 174
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	8c 2f       	mov	r24, r28
 89e:	04 c0       	rjmp	.+8      	; 0x8a8 <usbSetInterrupt+0x2a>
 8a0:	2a e5       	ldi	r18, 0x5A	; 90
 8a2:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <usbTxStatus1>
 8a6:	f7 cf       	rjmp	.-18     	; 0x896 <usbSetInterrupt+0x18>
 8a8:	91 91       	ld	r25, Z+
 8aa:	9d 93       	st	X+, r25
 8ac:	81 50       	subi	r24, 0x01	; 1
 8ae:	e1 f7       	brne	.-8      	; 0x8a8 <usbSetInterrupt+0x2a>
 8b0:	6c 2f       	mov	r22, r28
 8b2:	8e ea       	ldi	r24, 0xAE	; 174
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 9e 00 	call	0x13c	; 0x13c <usbCrc16Append>
 8ba:	cc 5f       	subi	r28, 0xFC	; 252
 8bc:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <usbTxStatus1>
 8c0:	cf 91       	pop	r28
 8c2:	08 95       	ret

000008c4 <usbPoll>:
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <usbRxLen>
 8cc:	83 50       	subi	r24, 0x03	; 3
 8ce:	87 fd       	sbrc	r24, 7
 8d0:	a9 c0       	rjmp	.+338    	; 0xa24 <usbPoll+0x160>
 8d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <usbRxToken>
 8d6:	9d 32       	cpi	r25, 0x2D	; 45
 8d8:	09 f0       	breq	.+2      	; 0x8dc <usbPoll+0x18>
 8da:	a2 c0       	rjmp	.+324    	; 0xa20 <usbPoll+0x15c>
 8dc:	88 30       	cpi	r24, 0x08	; 8
 8de:	09 f0       	breq	.+2      	; 0x8e2 <usbPoll+0x1e>
 8e0:	9f c0       	rjmp	.+318    	; 0xa20 <usbPoll+0x15c>
 8e2:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <usbInputBufOffset>
 8e6:	cc e0       	ldi	r28, 0x0C	; 12
 8e8:	d0 e0       	ldi	r29, 0x00	; 0
 8ea:	c8 1b       	sub	r28, r24
 8ec:	d1 09       	sbc	r29, r1
 8ee:	cf 53       	subi	r28, 0x3F	; 63
 8f0:	df 4f       	sbci	r29, 0xFF	; 255
 8f2:	83 ec       	ldi	r24, 0xC3	; 195
 8f4:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <usbTxBuf>
 8f8:	8a e5       	ldi	r24, 0x5A	; 90
 8fa:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <usbTxLen>
 8fe:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <usbMsgFlags>
 902:	88 81       	ld	r24, Y
 904:	80 76       	andi	r24, 0x60	; 96
 906:	21 f0       	breq	.+8      	; 0x910 <usbPoll+0x4c>
 908:	ce 01       	movw	r24, r28
 90a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usbFunctionSetup>
 90e:	7f c0       	rjmp	.+254    	; 0xa0e <usbPoll+0x14a>
 910:	9a 81       	ldd	r25, Y+2	; 0x02
 912:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <usbTxBuf+0x9>
 916:	89 81       	ldd	r24, Y+1	; 0x01
 918:	81 11       	cpse	r24, r1
 91a:	06 c0       	rjmp	.+12     	; 0x928 <usbPoll+0x64>
 91c:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <usbTxBuf+0xa>
 920:	2a ea       	ldi	r18, 0xAA	; 170
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	82 e0       	ldi	r24, 0x02	; 2
 926:	6f c0       	rjmp	.+222    	; 0xa06 <usbPoll+0x142>
 928:	85 30       	cpi	r24, 0x05	; 5
 92a:	19 f4       	brne	.+6      	; 0x932 <usbPoll+0x6e>
 92c:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <usbNewDeviceAddr>
 930:	67 c0       	rjmp	.+206    	; 0xa00 <usbPoll+0x13c>
 932:	86 30       	cpi	r24, 0x06	; 6
 934:	09 f0       	breq	.+2      	; 0x938 <usbPoll+0x74>
 936:	4e c0       	rjmp	.+156    	; 0x9d4 <usbPoll+0x110>
 938:	8b 81       	ldd	r24, Y+3	; 0x03
 93a:	81 30       	cpi	r24, 0x01	; 1
 93c:	41 f4       	brne	.+16     	; 0x94e <usbPoll+0x8a>
 93e:	8b e9       	ldi	r24, 0x9B	; 155
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <usbMsgPtr+0x1>
 946:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <usbMsgPtr>
 94a:	82 e1       	ldi	r24, 0x12	; 18
 94c:	3f c0       	rjmp	.+126    	; 0x9cc <usbPoll+0x108>
 94e:	82 30       	cpi	r24, 0x02	; 2
 950:	41 f4       	brne	.+16     	; 0x962 <usbPoll+0x9e>
 952:	89 e7       	ldi	r24, 0x79	; 121
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <usbMsgPtr+0x1>
 95a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <usbMsgPtr>
 95e:	82 e2       	ldi	r24, 0x22	; 34
 960:	35 c0       	rjmp	.+106    	; 0x9cc <usbPoll+0x108>
 962:	83 30       	cpi	r24, 0x03	; 3
 964:	f1 f4       	brne	.+60     	; 0x9a2 <usbPoll+0xde>
 966:	91 11       	cpse	r25, r1
 968:	08 c0       	rjmp	.+16     	; 0x97a <usbPoll+0xb6>
 96a:	8f ec       	ldi	r24, 0xCF	; 207
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <usbMsgPtr+0x1>
 972:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <usbMsgPtr>
 976:	84 e0       	ldi	r24, 0x04	; 4
 978:	29 c0       	rjmp	.+82     	; 0x9cc <usbPoll+0x108>
 97a:	91 30       	cpi	r25, 0x01	; 1
 97c:	41 f4       	brne	.+16     	; 0x98e <usbPoll+0xca>
 97e:	87 ec       	ldi	r24, 0xC7	; 199
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <usbMsgPtr+0x1>
 986:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <usbMsgPtr>
 98a:	88 e0       	ldi	r24, 0x08	; 8
 98c:	1f c0       	rjmp	.+62     	; 0x9cc <usbPoll+0x108>
 98e:	92 30       	cpi	r25, 0x02	; 2
 990:	e1 f4       	brne	.+56     	; 0x9ca <usbPoll+0x106>
 992:	8d ea       	ldi	r24, 0xAD	; 173
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <usbMsgPtr+0x1>
 99a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <usbMsgPtr>
 99e:	8a e1       	ldi	r24, 0x1A	; 26
 9a0:	15 c0       	rjmp	.+42     	; 0x9cc <usbPoll+0x108>
 9a2:	81 32       	cpi	r24, 0x21	; 33
 9a4:	41 f4       	brne	.+16     	; 0x9b6 <usbPoll+0xf2>
 9a6:	8b e8       	ldi	r24, 0x8B	; 139
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <usbMsgPtr+0x1>
 9ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <usbMsgPtr>
 9b2:	89 e0       	ldi	r24, 0x09	; 9
 9b4:	0b c0       	rjmp	.+22     	; 0x9cc <usbPoll+0x108>
 9b6:	82 32       	cpi	r24, 0x22	; 34
 9b8:	41 f4       	brne	.+16     	; 0x9ca <usbPoll+0x106>
 9ba:	84 e5       	ldi	r24, 0x54	; 84
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <usbMsgPtr+0x1>
 9c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <usbMsgPtr>
 9c6:	85 e2       	ldi	r24, 0x25	; 37
 9c8:	01 c0       	rjmp	.+2      	; 0x9cc <usbPoll+0x108>
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	90 e4       	ldi	r25, 0x40	; 64
 9ce:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <usbMsgFlags>
 9d2:	1d c0       	rjmp	.+58     	; 0xa0e <usbPoll+0x14a>
 9d4:	88 30       	cpi	r24, 0x08	; 8
 9d6:	69 f0       	breq	.+26     	; 0x9f2 <usbPoll+0x12e>
 9d8:	89 30       	cpi	r24, 0x09	; 9
 9da:	19 f4       	brne	.+6      	; 0x9e2 <usbPoll+0x11e>
 9dc:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <usbConfiguration>
 9e0:	0f c0       	rjmp	.+30     	; 0xa00 <usbPoll+0x13c>
 9e2:	8a 30       	cpi	r24, 0x0A	; 10
 9e4:	49 f0       	breq	.+18     	; 0x9f8 <usbPoll+0x134>
 9e6:	8b 30       	cpi	r24, 0x0B	; 11
 9e8:	59 f4       	brne	.+22     	; 0xa00 <usbPoll+0x13c>
 9ea:	8b e4       	ldi	r24, 0x4B	; 75
 9ec:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <usbTxStatus1+0x1>
 9f0:	07 c0       	rjmp	.+14     	; 0xa00 <usbPoll+0x13c>
 9f2:	20 ec       	ldi	r18, 0xC0	; 192
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <usbPoll+0x138>
 9f8:	2a ea       	ldi	r18, 0xAA	; 170
 9fa:	30 e0       	ldi	r19, 0x00	; 0
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	03 c0       	rjmp	.+6      	; 0xa06 <usbPoll+0x142>
 a00:	2a ea       	ldi	r18, 0xAA	; 170
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	80 e0       	ldi	r24, 0x00	; 0
 a06:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <usbMsgPtr+0x1>
 a0a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <usbMsgPtr>
 a0e:	9f 81       	ldd	r25, Y+7	; 0x07
 a10:	91 11       	cpse	r25, r1
 a12:	04 c0       	rjmp	.+8      	; 0xa1c <usbPoll+0x158>
 a14:	9e 81       	ldd	r25, Y+6	; 0x06
 a16:	98 17       	cp	r25, r24
 a18:	08 f4       	brcc	.+2      	; 0xa1c <usbPoll+0x158>
 a1a:	89 2f       	mov	r24, r25
 a1c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <usbMsgLen>
 a20:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <usbRxLen>
 a24:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <usbTxLen>
 a28:	84 ff       	sbrs	r24, 4
 a2a:	4c c0       	rjmp	.+152    	; 0xac4 <usbPoll+0x200>
 a2c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <usbMsgLen>
 a30:	8f 3f       	cpi	r24, 0xFF	; 255
 a32:	09 f4       	brne	.+2      	; 0xa36 <usbPoll+0x172>
 a34:	47 c0       	rjmp	.+142    	; 0xac4 <usbPoll+0x200>
 a36:	c8 2f       	mov	r28, r24
 a38:	89 30       	cpi	r24, 0x09	; 9
 a3a:	08 f0       	brcs	.+2      	; 0xa3e <usbPoll+0x17a>
 a3c:	c8 e0       	ldi	r28, 0x08	; 8
 a3e:	8c 1b       	sub	r24, r28
 a40:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <usbMsgLen>
 a44:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <usbTxBuf>
 a48:	88 e8       	ldi	r24, 0x88	; 136
 a4a:	89 27       	eor	r24, r25
 a4c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <usbTxBuf>
 a50:	cc 23       	and	r28, r28
 a52:	59 f1       	breq	.+86     	; 0xaaa <usbPoll+0x1e6>
 a54:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <usbMsgPtr>
 a58:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <usbMsgPtr+0x1>
 a5c:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <usbMsgFlags>
 a60:	26 ff       	sbrs	r18, 6
 a62:	12 c0       	rjmp	.+36     	; 0xa88 <usbPoll+0x1c4>
 a64:	a1 ea       	ldi	r26, 0xA1	; 161
 a66:	b0 e0       	ldi	r27, 0x00	; 0
 a68:	2c 2f       	mov	r18, r28
 a6a:	ac 01       	movw	r20, r24
 a6c:	41 5a       	subi	r20, 0xA1	; 161
 a6e:	50 40       	sbci	r21, 0x00	; 0
 a70:	fa 01       	movw	r30, r20
 a72:	ea 0f       	add	r30, r26
 a74:	fb 1f       	adc	r31, r27
 a76:	e4 91       	lpm	r30, Z
 a78:	11 96       	adiw	r26, 0x01	; 1
 a7a:	ec 93       	st	X, r30
 a7c:	11 97       	sbiw	r26, 0x01	; 1
 a7e:	21 50       	subi	r18, 0x01	; 1
 a80:	11 96       	adiw	r26, 0x01	; 1
 a82:	21 11       	cpse	r18, r1
 a84:	f5 cf       	rjmp	.-22     	; 0xa70 <usbPoll+0x1ac>
 a86:	08 c0       	rjmp	.+16     	; 0xa98 <usbPoll+0x1d4>
 a88:	e2 ea       	ldi	r30, 0xA2	; 162
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	dc 01       	movw	r26, r24
 a8e:	2c 2f       	mov	r18, r28
 a90:	3d 91       	ld	r19, X+
 a92:	31 93       	st	Z+, r19
 a94:	21 50       	subi	r18, 0x01	; 1
 a96:	e1 f7       	brne	.-8      	; 0xa90 <usbPoll+0x1cc>
 a98:	01 96       	adiw	r24, 0x01	; 1
 a9a:	2f ef       	ldi	r18, 0xFF	; 255
 a9c:	2c 0f       	add	r18, r28
 a9e:	82 0f       	add	r24, r18
 aa0:	91 1d       	adc	r25, r1
 aa2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <usbMsgPtr+0x1>
 aa6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <usbMsgPtr>
 aaa:	6c 2f       	mov	r22, r28
 aac:	82 ea       	ldi	r24, 0xA2	; 162
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	0e 94 9e 00 	call	0x13c	; 0x13c <usbCrc16Append>
 ab4:	cc 5f       	subi	r28, 0xFC	; 252
 ab6:	cc 30       	cpi	r28, 0x0C	; 12
 ab8:	19 f0       	breq	.+6      	; 0xac0 <usbPoll+0x1fc>
 aba:	8f ef       	ldi	r24, 0xFF	; 255
 abc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <usbMsgLen>
 ac0:	c0 93 63 00 	sts	0x0063, r28	; 0x800063 <usbTxLen>
 ac4:	84 e1       	ldi	r24, 0x14	; 20
 ac6:	90 b3       	in	r25, 0x10	; 16
 ac8:	94 71       	andi	r25, 0x14	; 20
 aca:	31 f4       	brne	.+12     	; 0xad8 <usbPoll+0x214>
 acc:	81 50       	subi	r24, 0x01	; 1
 ace:	d9 f7       	brne	.-10     	; 0xac6 <usbPoll+0x202>
 ad0:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <usbNewDeviceAddr>
 ad4:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <usbDeviceAddr>
 ad8:	df 91       	pop	r29
 ada:	cf 91       	pop	r28
 adc:	08 95       	ret

00000ade <usbInit>:
 ade:	85 b7       	in	r24, 0x35	; 53
 ae0:	82 60       	ori	r24, 0x02	; 2
 ae2:	85 bf       	out	0x35, r24	; 53
 ae4:	8b b7       	in	r24, 0x3b	; 59
 ae6:	80 64       	ori	r24, 0x40	; 64
 ae8:	8b bf       	out	0x3b, r24	; 59
 aea:	ec ea       	ldi	r30, 0xAC	; 172
 aec:	f0 e0       	ldi	r31, 0x00	; 0
 aee:	8b e4       	ldi	r24, 0x4B	; 75
 af0:	81 83       	std	Z+1, r24	; 0x01
 af2:	8a e5       	ldi	r24, 0x5A	; 90
 af4:	80 83       	st	Z, r24
 af6:	08 95       	ret

00000af8 <_exit>:
 af8:	f8 94       	cli

00000afa <__stop_program>:
 afa:	ff cf       	rjmp	.-2      	; 0xafa <__stop_program>
