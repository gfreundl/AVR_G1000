
g1000_ctr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000852  000008e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  00800062  00800062  000008e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000958  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012cd  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5d  00000000  00000000  00001ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f5c  00000000  00000000  00002702  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00003660  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000703  00000000  00000000  000036fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d7  00000000  00000000  00003dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000047d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
   4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_1>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	05 01       	movw	r0, r10
  56:	09 05       	cpc	r16, r9
  58:	a1 01       	movw	r20, r2
  5a:	05 09       	sbc	r16, r5
  5c:	19 01       	movw	r2, r18
  5e:	29 20       	and	r2, r9
  60:	15 00       	.word	0x0015	; ????
  62:	25 01       	movw	r4, r10
  64:	75 01       	movw	r14, r10
  66:	95 10       	cpse	r9, r5
  68:	81 02       	muls	r24, r17
  6a:	c0 09       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <usbDescriptorConfiguration>:
  6b:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
  7b:	00 00 09 21 01 01 00 01 22 17 00 07 05 81 03 08     ...!....".......
  8b:	00 64                                               .d

0000008d <usbDescriptorDevice>:
  8d:	12 01 10 01 00 00 00 08 c0 16 02 40 00 01 01 02     ...........@....
  9d:	00 01                                               ..

0000009f <usbDescriptorStringDevice>:
  9f:	1e 03 67 00 31 00 30 00 30 00 30 00 5f 00 63 00     ..g.1.0.0.0._.c.
  af:	65 00 6e 00 74 00 65 00 72 00 20 00 31 00           e.n.t.e.r. .1.

000000bd <usbDescriptorStringVendor>:
  bd:	08 03 67 00 66 00 65 00                             ..g.f.e.

000000c5 <usbDescriptorString0>:
  c5:	04 03 09 04 00                                      .....

000000ca <__ctors_end>:
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf e5       	ldi	r28, 0x5F	; 95
  d0:	d4 e0       	ldi	r29, 0x04	; 4
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	a0 e6       	ldi	r26, 0x60	; 96
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e2 e5       	ldi	r30, 0x52	; 82
  de:	f8 e0       	ldi	r31, 0x08	; 8
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
  e2:	05 90       	lpm	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	a2 36       	cpi	r26, 0x62	; 98
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	a2 e6       	ldi	r26, 0x62	; 98
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	ac 39       	cpi	r26, 0x9C	; 156
  f8:	b2 07       	cpc	r27, r18
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
  fc:	0e 94 07 02 	call	0x40e	; 0x40e <main>
 100:	0c 94 27 04 	jmp	0x84e	; 0x84e <_exit>

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <usbCrc16>:
 108:	a8 2f       	mov	r26, r24
 10a:	b9 2f       	mov	r27, r25
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	41 e0       	ldi	r20, 0x01	; 1
 112:	50 ea       	ldi	r21, 0xA0	; 160
 114:	60 95       	com	r22
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	09 c0       	rjmp	.+18     	; 0x12c <usbCrcLoopEntry>

0000011a <usbCrcByteLoop>:
 11a:	2d 91       	ld	r18, X+
 11c:	82 27       	eor	r24, r18

0000011e <usbCrcBitLoop>:
 11e:	97 95       	ror	r25
 120:	87 95       	ror	r24
 122:	10 f0       	brcs	.+4      	; 0x128 <usbCrcNoXor>
 124:	84 27       	eor	r24, r20
 126:	95 27       	eor	r25, r21

00000128 <usbCrcNoXor>:
 128:	30 5e       	subi	r19, 0xE0	; 224
 12a:	c8 f3       	brcs	.-14     	; 0x11e <usbCrcBitLoop>

0000012c <usbCrcLoopEntry>:
 12c:	6f 5f       	subi	r22, 0xFF	; 255
 12e:	a8 f3       	brcs	.-22     	; 0x11a <usbCrcByteLoop>

00000130 <usbCrcReady>:
 130:	08 95       	ret

00000132 <usbCrc16Append>:
 132:	ea df       	rcall	.-44     	; 0x108 <usbCrc16>
 134:	8d 93       	st	X+, r24
 136:	9d 93       	st	X+, r25
 138:	08 95       	ret

0000013a <__vector_1>:
 13a:	cf 93       	push	r28
 13c:	cf b7       	in	r28, 0x3f	; 63
 13e:	cf 93       	push	r28

00000140 <waitForJ>:
 140:	c3 95       	inc	r28
 142:	81 9b       	sbis	0x10, 1	; 16
 144:	e9 f7       	brne	.-6      	; 0x140 <waitForJ>

00000146 <waitForK>:
 146:	81 9b       	sbis	0x10, 1	; 16
 148:	09 c0       	rjmp	.+18     	; 0x15c <foundK>
 14a:	81 9b       	sbis	0x10, 1	; 16
 14c:	07 c0       	rjmp	.+14     	; 0x15c <foundK>
 14e:	81 9b       	sbis	0x10, 1	; 16
 150:	05 c0       	rjmp	.+10     	; 0x15c <foundK>
 152:	81 9b       	sbis	0x10, 1	; 16
 154:	03 c0       	rjmp	.+6      	; 0x15c <foundK>
 156:	81 9b       	sbis	0x10, 1	; 16
 158:	01 c0       	rjmp	.+2      	; 0x15c <foundK>
 15a:	a3 c0       	rjmp	.+326    	; 0x2a2 <sofError>

0000015c <foundK>:
 15c:	df 93       	push	r29
 15e:	c0 91 7f 00 	lds	r28, 0x007F	; 0x80007f <usbInputBufOffset>
 162:	dd 27       	eor	r29, r29
 164:	ca 57       	subi	r28, 0x7A	; 122
 166:	df 4f       	sbci	r29, 0xFF	; 255
 168:	81 9b       	sbis	0x10, 1	; 16
 16a:	02 c0       	rjmp	.+4      	; 0x170 <haveTwoBitsK>
 16c:	df 91       	pop	r29
 16e:	eb cf       	rjmp	.-42     	; 0x146 <waitForK>

00000170 <haveTwoBitsK>:
 170:	2f 93       	push	r18
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	00 b3       	in	r16, 0x10	; 16
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	01 fb       	bst	r16, 1
 17c:	20 f9       	bld	r18, 0
 17e:	4f 93       	push	r20
 180:	3f 93       	push	r19
 182:	10 b3       	in	r17, 0x10	; 16
 184:	4f ef       	ldi	r20, 0xFF	; 255
 186:	01 27       	eor	r16, r17
 188:	01 fb       	bst	r16, 1
 18a:	21 f9       	bld	r18, 1
 18c:	3b e0       	ldi	r19, 0x0B	; 11
 18e:	31 c0       	rjmp	.+98     	; 0x1f2 <rxbit2>

00000190 <unstuff0>:
 190:	4e 7f       	andi	r20, 0xFE	; 254
 192:	01 2f       	mov	r16, r17
 194:	10 b3       	in	r17, 0x10	; 16
 196:	21 60       	ori	r18, 0x01	; 1
 198:	28 c0       	rjmp	.+80     	; 0x1ea <didUnstuff0>

0000019a <unstuff1>:
 19a:	10 2f       	mov	r17, r16
 19c:	4d 7f       	andi	r20, 0xFD	; 253
 19e:	22 60       	ori	r18, 0x02	; 2
 1a0:	00 00       	nop
 1a2:	00 b3       	in	r16, 0x10	; 16
 1a4:	29 c0       	rjmp	.+82     	; 0x1f8 <didUnstuff1>

000001a6 <unstuff2>:
 1a6:	4b 7f       	andi	r20, 0xFB	; 251
 1a8:	24 60       	ori	r18, 0x04	; 4
 1aa:	01 2f       	mov	r16, r17
 1ac:	00 00       	nop
 1ae:	10 b3       	in	r17, 0x10	; 16
 1b0:	2b c0       	rjmp	.+86     	; 0x208 <didUnstuff2>

000001b2 <unstuff3>:
 1b2:	10 b3       	in	r17, 0x10	; 16
 1b4:	47 7f       	andi	r20, 0xF7	; 247
 1b6:	28 60       	ori	r18, 0x08	; 8
 1b8:	2a c0       	rjmp	.+84     	; 0x20e <didUnstuff3>

000001ba <unstuff4>:
 1ba:	4f 7e       	andi	r20, 0xEF	; 239
 1bc:	00 b3       	in	r16, 0x10	; 16
 1be:	20 61       	ori	r18, 0x10	; 16
 1c0:	2c c0       	rjmp	.+88     	; 0x21a <didUnstuff4>

000001c2 <unstuff5>:
 1c2:	4f 7d       	andi	r20, 0xDF	; 223
 1c4:	10 b3       	in	r17, 0x10	; 16
 1c6:	20 62       	ori	r18, 0x20	; 32
 1c8:	2f c0       	rjmp	.+94     	; 0x228 <didUnstuff5>

000001ca <unstuff6>:
 1ca:	4f 7b       	andi	r20, 0xBF	; 191
 1cc:	00 b3       	in	r16, 0x10	; 16
 1ce:	20 64       	ori	r18, 0x40	; 64
 1d0:	32 c0       	rjmp	.+100    	; 0x236 <didUnstuff6>

000001d2 <rxLoop>:
 1d2:	42 27       	eor	r20, r18
 1d4:	00 b3       	in	r16, 0x10	; 16
 1d6:	49 93       	st	Y+, r20
 1d8:	4f ef       	ldi	r20, 0xFF	; 255
 1da:	00 00       	nop
 1dc:	10 27       	eor	r17, r16
 1de:	11 fb       	bst	r17, 1
 1e0:	20 f9       	bld	r18, 0
 1e2:	10 b3       	in	r17, 0x10	; 16
 1e4:	16 70       	andi	r17, 0x06	; 6
 1e6:	c9 f1       	breq	.+114    	; 0x25a <se0>
 1e8:	29 7f       	andi	r18, 0xF9	; 249

000001ea <didUnstuff0>:
 1ea:	91 f2       	breq	.-92     	; 0x190 <unstuff0>
 1ec:	01 27       	eor	r16, r17
 1ee:	01 fb       	bst	r16, 1
 1f0:	21 f9       	bld	r18, 1

000001f2 <rxbit2>:
 1f2:	00 b3       	in	r16, 0x10	; 16
 1f4:	23 7f       	andi	r18, 0xF3	; 243
 1f6:	89 f2       	breq	.-94     	; 0x19a <unstuff1>

000001f8 <didUnstuff1>:
 1f8:	31 50       	subi	r19, 0x01	; 1
 1fa:	58 f1       	brcs	.+86     	; 0x252 <overflow>
 1fc:	10 27       	eor	r17, r16
 1fe:	11 fb       	bst	r17, 1
 200:	22 f9       	bld	r18, 2
 202:	10 b3       	in	r17, 0x10	; 16
 204:	27 7e       	andi	r18, 0xE7	; 231
 206:	79 f2       	breq	.-98     	; 0x1a6 <unstuff2>

00000208 <didUnstuff2>:
 208:	01 27       	eor	r16, r17
 20a:	01 fb       	bst	r16, 1
 20c:	23 f9       	bld	r18, 3

0000020e <didUnstuff3>:
 20e:	2f 7c       	andi	r18, 0xCF	; 207
 210:	81 f2       	breq	.-96     	; 0x1b2 <unstuff3>
 212:	00 b3       	in	r16, 0x10	; 16
 214:	10 27       	eor	r17, r16
 216:	11 fb       	bst	r17, 1
 218:	24 f9       	bld	r18, 4

0000021a <didUnstuff4>:
 21a:	2f 79       	andi	r18, 0x9F	; 159
 21c:	71 f2       	breq	.-100    	; 0x1ba <unstuff4>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <didUnstuff4+0x6>
 220:	10 b3       	in	r17, 0x10	; 16
 222:	01 27       	eor	r16, r17
 224:	01 fb       	bst	r16, 1
 226:	25 f9       	bld	r18, 5

00000228 <didUnstuff5>:
 228:	2f 73       	andi	r18, 0x3F	; 63
 22a:	59 f2       	breq	.-106    	; 0x1c2 <unstuff5>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <didUnstuff5+0x6>
 22e:	00 b3       	in	r16, 0x10	; 16
 230:	10 27       	eor	r17, r16
 232:	11 fb       	bst	r17, 1
 234:	26 f9       	bld	r18, 6

00000236 <didUnstuff6>:
 236:	22 30       	cpi	r18, 0x02	; 2
 238:	40 f2       	brcs	.-112    	; 0x1ca <unstuff6>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <didUnstuff6+0x6>
 23c:	10 b3       	in	r17, 0x10	; 16
 23e:	01 27       	eor	r16, r17
 240:	01 fb       	bst	r16, 1
 242:	27 f9       	bld	r18, 7

00000244 <didUnstuff7>:
 244:	24 30       	cpi	r18, 0x04	; 4
 246:	28 f6       	brcc	.-118    	; 0x1d2 <rxLoop>

00000248 <unstuff7>:
 248:	4f 77       	andi	r20, 0x7F	; 127
 24a:	20 68       	ori	r18, 0x80	; 128
 24c:	10 b3       	in	r17, 0x10	; 16
 24e:	00 00       	nop
 250:	f9 cf       	rjmp	.-14     	; 0x244 <didUnstuff7>

00000252 <overflow>:
 252:	10 e4       	ldi	r17, 0x40	; 64
 254:	1a bf       	out	0x3a, r17	; 58

00000256 <ignorePacket>:
 256:	00 27       	eor	r16, r16
 258:	19 c0       	rjmp	.+50     	; 0x28c <handleSetupOrOut>

0000025a <se0>:
 25a:	3b 50       	subi	r19, 0x0B	; 11
 25c:	31 95       	neg	r19
 25e:	c3 1b       	sub	r28, r19
 260:	d0 40       	sbci	r29, 0x00	; 0
 262:	10 e4       	ldi	r17, 0x40	; 64
 264:	1a bf       	out	0x3a, r17	; 58
 266:	08 81       	ld	r16, Y
 268:	03 3c       	cpi	r16, 0xC3	; 195
 26a:	f9 f0       	breq	.+62     	; 0x2aa <handleData>
 26c:	0b 34       	cpi	r16, 0x4B	; 75
 26e:	e9 f0       	breq	.+58     	; 0x2aa <handleData>
 270:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <usbDeviceAddr>
 274:	19 81       	ldd	r17, Y+1	; 0x01
 276:	11 0f       	add	r17, r17
 278:	12 13       	cpse	r17, r18
 27a:	ed cf       	rjmp	.-38     	; 0x256 <ignorePacket>
 27c:	4a 81       	ldd	r20, Y+2	; 0x02
 27e:	44 1f       	adc	r20, r20
 280:	09 36       	cpi	r16, 0x69	; 105
 282:	41 f1       	breq	.+80     	; 0x2d4 <handleIn>
 284:	0d 32       	cpi	r16, 0x2D	; 45
 286:	11 f0       	breq	.+4      	; 0x28c <handleSetupOrOut>
 288:	01 3e       	cpi	r16, 0xE1	; 225
 28a:	29 f7       	brne	.-54     	; 0x256 <ignorePacket>

0000028c <handleSetupOrOut>:
 28c:	00 93 84 00 	sts	0x0084, r16	; 0x800084 <usbCurrentTok>

00000290 <doReturn>:
 290:	3f 91       	pop	r19
 292:	4f 91       	pop	r20
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	2f 91       	pop	r18
 29a:	df 91       	pop	r29
 29c:	ca b7       	in	r28, 0x3a	; 58
 29e:	c6 fd       	sbrc	r28, 6
 2a0:	4f cf       	rjmp	.-354    	; 0x140 <waitForJ>

000002a2 <sofError>:
 2a2:	cf 91       	pop	r28
 2a4:	cf bf       	out	0x3f, r28	; 63
 2a6:	cf 91       	pop	r28
 2a8:	18 95       	reti

000002aa <handleData>:
 2aa:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <usbCurrentTok>
 2ae:	22 23       	and	r18, r18
 2b0:	79 f3       	breq	.-34     	; 0x290 <doReturn>
 2b2:	10 91 82 00 	lds	r17, 0x0082	; 0x800082 <usbRxLen>
 2b6:	11 23       	and	r17, r17
 2b8:	69 f5       	brne	.+90     	; 0x314 <sendNakAndReti>
 2ba:	34 30       	cpi	r19, 0x04	; 4
 2bc:	6a f1       	brmi	.+90     	; 0x318 <sendAckAndReti>
 2be:	30 93 82 00 	sts	0x0082, r19	; 0x800082 <usbRxLen>
 2c2:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <usbRxToken>
 2c6:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <usbInputBufOffset>
 2ca:	3b e0       	ldi	r19, 0x0B	; 11
 2cc:	31 1b       	sub	r19, r17
 2ce:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <usbInputBufOffset>
 2d2:	22 c0       	rjmp	.+68     	; 0x318 <sendAckAndReti>

000002d4 <handleIn>:
 2d4:	00 91 82 00 	lds	r16, 0x0082	; 0x800082 <usbRxLen>
 2d8:	01 30       	cpi	r16, 0x01	; 1
 2da:	e4 f4       	brge	.+56     	; 0x314 <sendNakAndReti>
 2dc:	0a e5       	ldi	r16, 0x5A	; 90
 2de:	4f 70       	andi	r20, 0x0F	; 15
 2e0:	49 f4       	brne	.+18     	; 0x2f4 <handleIn1>
 2e2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <usbTxLen>
 2e6:	34 fd       	sbrc	r19, 4
 2e8:	19 c0       	rjmp	.+50     	; 0x31c <sendCntAndReti>
 2ea:	00 93 61 00 	sts	0x0061, r16	; 0x800061 <usbTxLen>
 2ee:	c6 e6       	ldi	r28, 0x66	; 102
 2f0:	d0 e0       	ldi	r29, 0x00	; 0
 2f2:	18 c0       	rjmp	.+48     	; 0x324 <usbSendAndReti>

000002f4 <handleIn1>:
 2f4:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <usbTxStatus1>
 2f8:	34 fd       	sbrc	r19, 4
 2fa:	10 c0       	rjmp	.+32     	; 0x31c <sendCntAndReti>
 2fc:	00 93 71 00 	sts	0x0071, r16	; 0x800071 <usbTxStatus1>
 300:	c2 e7       	ldi	r28, 0x72	; 114
 302:	d0 e0       	ldi	r29, 0x00	; 0
 304:	0f c0       	rjmp	.+30     	; 0x324 <usbSendAndReti>

00000306 <stuffN1Delay>:
 306:	27 95       	ror	r18
 308:	a8 f4       	brcc	.+42     	; 0x334 <doExorN1>
 30a:	51 50       	subi	r21, 0x01	; 1
 30c:	a9 f4       	brne	.+42     	; 0x338 <commonN1>
 30e:	22 0f       	add	r18, r18
 310:	00 00       	nop
 312:	f9 cf       	rjmp	.-14     	; 0x306 <stuffN1Delay>

00000314 <sendNakAndReti>:
 314:	4a e5       	ldi	r20, 0x5A	; 90
 316:	03 c0       	rjmp	.+6      	; 0x31e <usbSendX3>

00000318 <sendAckAndReti>:
 318:	42 ed       	ldi	r20, 0xD2	; 210
 31a:	01 c0       	rjmp	.+2      	; 0x31e <usbSendX3>

0000031c <sendCntAndReti>:
 31c:	43 2f       	mov	r20, r19

0000031e <usbSendX3>:
 31e:	c4 e1       	ldi	r28, 0x14	; 20
 320:	d0 e0       	ldi	r29, 0x00	; 0
 322:	32 e0       	ldi	r19, 0x02	; 2

00000324 <usbSendAndReti>:
 324:	11 b3       	in	r17, 0x11	; 17
 326:	16 60       	ori	r17, 0x06	; 6
 328:	91 9a       	sbi	0x12, 1	; 18
 32a:	11 bb       	out	0x11, r17	; 17
 32c:	02 b3       	in	r16, 0x12	; 18
 32e:	20 e4       	ldi	r18, 0x40	; 64
 330:	16 e0       	ldi	r17, 0x06	; 6
 332:	5f 93       	push	r21

00000334 <doExorN1>:
 334:	01 27       	eor	r16, r17
 336:	56 e0       	ldi	r21, 0x06	; 6

00000338 <commonN1>:
 338:	02 bb       	out	0x12, r16	; 18
 33a:	27 95       	ror	r18
 33c:	20 f4       	brcc	.+8      	; 0x346 <doExorN2>
 33e:	51 50       	subi	r21, 0x01	; 1
 340:	21 f4       	brne	.+8      	; 0x34a <commonN2>
 342:	22 0f       	add	r18, r18
 344:	f9 cf       	rjmp	.-14     	; 0x338 <commonN1>

00000346 <doExorN2>:
 346:	01 27       	eor	r16, r17
 348:	56 e0       	ldi	r21, 0x06	; 6

0000034a <commonN2>:
 34a:	00 00       	nop
 34c:	3b 5a       	subi	r19, 0xAB	; 171
 34e:	02 bb       	out	0x12, r16	; 18
 350:	d0 f2       	brcs	.-76     	; 0x306 <stuffN1Delay>

00000352 <stuff6Delay>:
 352:	27 95       	ror	r18
 354:	28 f4       	brcc	.+10     	; 0x360 <doExor6>
 356:	51 50       	subi	r21, 0x01	; 1
 358:	29 f4       	brne	.+10     	; 0x364 <common6>
 35a:	22 0f       	add	r18, r18
 35c:	00 00       	nop
 35e:	f9 cf       	rjmp	.-14     	; 0x352 <stuff6Delay>

00000360 <doExor6>:
 360:	01 27       	eor	r16, r17
 362:	56 e0       	ldi	r21, 0x06	; 6

00000364 <common6>:
 364:	27 95       	ror	r18
 366:	02 bb       	out	0x12, r16	; 18
 368:	20 f4       	brcc	.+8      	; 0x372 <doExor7>
 36a:	51 50       	subi	r21, 0x01	; 1
 36c:	21 f4       	brne	.+8      	; 0x376 <common7>
 36e:	22 0f       	add	r18, r18
 370:	f9 cf       	rjmp	.-14     	; 0x364 <common6>

00000372 <doExor7>:
 372:	01 27       	eor	r16, r17
 374:	56 e0       	ldi	r21, 0x06	; 6

00000376 <common7>:
 376:	29 91       	ld	r18, Y+
 378:	33 23       	and	r19, r19
 37a:	02 bb       	out	0x12, r16	; 18
 37c:	21 f6       	brne	.-120    	; 0x306 <stuffN1Delay>
 37e:	09 7f       	andi	r16, 0xF9	; 249
 380:	10 91 83 00 	lds	r17, 0x0083	; 0x800083 <usbNewDeviceAddr>
 384:	11 0f       	add	r17, r17
 386:	c6 51       	subi	r28, 0x16	; 22
 388:	d0 40       	sbci	r29, 0x00	; 0
 38a:	02 bb       	out	0x12, r16	; 18
 38c:	11 f0       	breq	.+4      	; 0x392 <skipAddrAssign>
 38e:	10 93 7d 00 	sts	0x007D, r17	; 0x80007d <usbDeviceAddr>

00000392 <skipAddrAssign>:
 392:	10 e4       	ldi	r17, 0x40	; 64
 394:	1a bf       	out	0x3a, r17	; 58
 396:	02 60       	ori	r16, 0x02	; 2
 398:	11 b3       	in	r17, 0x11	; 17
 39a:	19 7f       	andi	r17, 0xF9	; 249
 39c:	40 2f       	mov	r20, r16
 39e:	49 7f       	andi	r20, 0xF9	; 249
 3a0:	5f 91       	pop	r21
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <skipAddrAssign+0x12>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <skipAddrAssign+0x14>
 3a6:	02 bb       	out	0x12, r16	; 18
 3a8:	11 bb       	out	0x11, r17	; 17
 3aa:	42 bb       	out	0x12, r20	; 18
 3ac:	71 cf       	rjmp	.-286    	; 0x290 <doReturn>

000003ae <usbFunctionSetup>:
void init_TC1(void);

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 3ae:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;
    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.    */
    if ((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS)
 3b0:	90 81       	ld	r25, Z
 3b2:	90 76       	andi	r25, 0x60	; 96
 3b4:	90 32       	cpi	r25, 0x20	; 32
 3b6:	e1 f4       	brne	.+56     	; 0x3f0 <usbFunctionSetup+0x42>
	{    
		/* class request type */
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if (rq->bRequest == USBRQ_HID_GET_REPORT)
 3b8:	81 81       	ldd	r24, Z+1	; 0x01
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	41 f4       	brne	.+16     	; 0x3ce <usbFunctionSetup+0x20>
		{  
			/* wValue: ReportType (highbyte), ReportID (lowbyte) */
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
 3be:	83 e6       	ldi	r24, 0x63	; 99
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <usbMsgPtr+0x1>
 3c6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbMsgPtr>
            return sizeof(reportBuffer);
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	08 95       	ret
        }
		else if (rq->bRequest == USBRQ_HID_GET_IDLE)
 3ce:	82 30       	cpi	r24, 0x02	; 2
 3d0:	41 f4       	brne	.+16     	; 0x3e2 <usbFunctionSetup+0x34>
		{
            usbMsgPtr = &idleRate;
 3d2:	82 e6       	ldi	r24, 0x62	; 98
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <usbMsgPtr+0x1>
 3da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbMsgPtr>
            return 1;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	08 95       	ret
        }
		else if (rq->bRequest == USBRQ_HID_SET_IDLE)
 3e2:	8a 30       	cpi	r24, 0x0A	; 10
 3e4:	39 f4       	brne	.+14     	; 0x3f4 <usbFunctionSetup+0x46>
		{
            idleRate = rq->wValue.bytes[1];
 3e6:	83 81       	ldd	r24, Z+3	; 0x03
 3e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
    }
	else
	{
				// no vendor specific requests implemented 
    }
    return 0;   // default for not implemented requests: return no data back to host 
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret
 3f4:	80 e0       	ldi	r24, 0x00	; 0
}
 3f6:	08 95       	ret

000003f8 <init_TC1>:


void init_TC1(void)
{
	//TCCR1A = (1<<COM1A1) ;				//clear OC1A pin on match
	TCCR1B |= (1 << WGM12);					//normal mode
 3f8:	8e b5       	in	r24, 0x2e	; 46
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10)|(1 << CS12);		//1024 prescaler
 3fe:	8e b5       	in	r24, 0x2e	; 46
 400:	85 60       	ori	r24, 0x05	; 5
 402:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x300;							//65ms@12MHz, interval time = (1/clk)*prescaler*OCR1A
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	93 e0       	ldi	r25, 0x03	; 3
 408:	9b bd       	out	0x2b, r25	; 43
 40a:	8a bd       	out	0x2a, r24	; 42
 40c:	08 95       	ret

0000040e <main>:
int __attribute__((noreturn)) main(void)
{

	uchar   i;

	init_TC1();
 40e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <init_TC1>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 412:	9e e0       	ldi	r25, 0x0E	; 14
 414:	88 e1       	ldi	r24, 0x18	; 24
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	a8 95       	wdr
 41c:	81 bd       	out	0x21, r24	; 33
 41e:	0f be       	out	0x3f, r0	; 63
 420:	91 bd       	out	0x21, r25	; 33
     * the status of the watchdog (on/off, period) is PRESERVED OVER RESET!
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */

    usbInit();
 422:	0e 94 1a 04 	call	0x834	; 0x834 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 426:	89 9a       	sbi	0x11, 1	; 17
 428:	8f ef       	ldi	r24, 0xFF	; 255
    i = 0;
    while(--i)				/* fake USB disconnect for > 250 ms */
	{             
        wdt_reset();
 42a:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42c:	e7 eb       	ldi	r30, 0xB7	; 183
 42e:	fb e0       	ldi	r31, 0x0B	; 11
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <main+0x22>
 434:	00 c0       	rjmp	.+0      	; 0x436 <main+0x28>
 436:	00 00       	nop
 438:	81 50       	subi	r24, 0x01	; 1
    DBG1(0x00, 0, 0);       /* debug output: main starts */

    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    i = 0;
    while(--i)				/* fake USB disconnect for > 250 ms */
 43a:	b9 f7       	brne	.-18     	; 0x42a <main+0x1c>
	{             
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
 43c:	89 98       	cbi	0x11, 1	; 17
    sei();
 43e:	78 94       	sei
		PORTC |= 0b11111111;
		PORTD |= 0b11111001;							//no pull-ups on USB ports PD2, PD1


		//Buttons displayed inverted in Windows GUI: LSB left, MSB right
		reportBuffer.a1 =	((1<<PINB1) & ~(PINB & (1<<PINB1))) >>1		//S1
 440:	68 94       	set
 442:	cc 24       	eor	r12, r12
 444:	c1 f8       	bld	r12, 1
 446:	c3 e6       	ldi	r28, 0x63	; 99
 448:	d0 e0       	ldi	r29, 0x00	; 0
		}
			 
	    DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
        wdt_reset();
        usbPoll();
        if(usbInterruptIsReady())
 44a:	01 e7       	ldi	r16, 0x71	; 113
 44c:	10 e0       	ldi	r17, 0x00	; 0
	{                

		DDRB &= 0b00000000;								//all ports input
		DDRC &= 0b00000000;
		DDRD &= 0b00000000;								//USB ports handle DDR on their own
		PORTB |= 0b11111111;
 44e:	ff 24       	eor	r15, r15
 450:	fa 94       	dec	r15
		PORTC |= 0b11111111;
		PORTD |= 0b11111001;							//no pull-ups on USB ports PD2, PD1


		//Buttons displayed inverted in Windows GUI: LSB left, MSB right
		reportBuffer.a1 =	((1<<PINB1) & ~(PINB & (1<<PINB1))) >>1		//S1
 452:	dc 2c       	mov	r13, r12
							| ((1<<PIND5) & ~(PIND & (1<<PIND5))) >>1	//S5
							| ((1<<PIND0) & ~(PIND & (1<<PIND0))) <<5	//S4
							| ((1<<PINC5) & ~(PINC & (1<<PINC5))) <<1	//S9
							| ((1<<PINC4) & ~(PINC & (1<<PINC4))) <<3;	//S8

		reportBuffer.a2 =	((1<<PINC3) & ~(PINC & (1<<PINC3))) >>3		//S7
 454:	68 94       	set
 456:	ee 24       	eor	r14, r14
 458:	e3 f8       	bld	r14, 3

    DBG1(0x01, 0, 0);       /* debug output: main loop starts */
    for(;;)					//main event loop
	{                

		DDRB &= 0b00000000;								//all ports input
 45a:	87 b3       	in	r24, 0x17	; 23
 45c:	17 ba       	out	0x17, r1	; 23
		DDRC &= 0b00000000;
 45e:	84 b3       	in	r24, 0x14	; 20
 460:	14 ba       	out	0x14, r1	; 20
		DDRD &= 0b00000000;								//USB ports handle DDR on their own
 462:	81 b3       	in	r24, 0x11	; 17
 464:	11 ba       	out	0x11, r1	; 17
		PORTB |= 0b11111111;
 466:	88 b3       	in	r24, 0x18	; 24
 468:	f8 ba       	out	0x18, r15	; 24
		PORTC |= 0b11111111;
 46a:	85 b3       	in	r24, 0x15	; 21
 46c:	f5 ba       	out	0x15, r15	; 21
		PORTD |= 0b11111001;							//no pull-ups on USB ports PD2, PD1
 46e:	82 b3       	in	r24, 0x12	; 18
 470:	89 6f       	ori	r24, 0xF9	; 249
 472:	82 bb       	out	0x12, r24	; 18


		//Buttons displayed inverted in Windows GUI: LSB left, MSB right
		reportBuffer.a1 =	((1<<PINB1) & ~(PINB & (1<<PINB1))) >>1		//S1
 474:	26 b3       	in	r18, 0x16	; 22
 476:	22 70       	andi	r18, 0x02	; 2
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	20 95       	com	r18
 47c:	30 95       	com	r19
 47e:	26 95       	lsr	r18
 480:	21 70       	andi	r18, 0x01	; 1
 482:	b0 9b       	sbis	0x16, 0	; 22
 484:	02 c0       	rjmp	.+4      	; 0x48a <__stack+0x2b>
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	01 c0       	rjmp	.+2      	; 0x48c <__stack+0x2d>
 48a:	5d 2d       	mov	r21, r13
							| ((1<<PINB0) & ~(PINB & (1<<PINB0))) <<1	//S2
							| ((1<<PIND7) & ~(PIND & (1<<PIND7))) >>5	//S3
 48c:	40 b3       	in	r20, 0x10	; 16
							| ((1<<PIND6) & ~(PIND & (1<<PIND6))) >>3	//S6
 48e:	30 b3       	in	r19, 0x10	; 16
							| ((1<<PIND5) & ~(PIND & (1<<PIND5))) >>1	//S5
 490:	90 b3       	in	r25, 0x10	; 16
 492:	40 78       	andi	r20, 0x80	; 128
 494:	64 2f       	mov	r22, r20
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	60 95       	com	r22
 49a:	70 95       	com	r23
 49c:	60 78       	andi	r22, 0x80	; 128
 49e:	77 27       	eor	r23, r23
 4a0:	75 95       	asr	r23
 4a2:	67 95       	ror	r22
 4a4:	75 95       	asr	r23
 4a6:	67 95       	ror	r22
 4a8:	75 95       	asr	r23
 4aa:	67 95       	ror	r22
 4ac:	75 95       	asr	r23
 4ae:	67 95       	ror	r22
 4b0:	75 95       	asr	r23
 4b2:	67 95       	ror	r22
 4b4:	26 2b       	or	r18, r22
 4b6:	30 74       	andi	r19, 0x40	; 64
 4b8:	e3 2f       	mov	r30, r19
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	e0 95       	com	r30
 4be:	f0 95       	com	r31
 4c0:	e0 74       	andi	r30, 0x40	; 64
 4c2:	ff 27       	eor	r31, r31
 4c4:	f5 95       	asr	r31
 4c6:	e7 95       	ror	r30
 4c8:	f5 95       	asr	r31
 4ca:	e7 95       	ror	r30
 4cc:	f5 95       	asr	r31
 4ce:	e7 95       	ror	r30
 4d0:	2e 2b       	or	r18, r30
 4d2:	90 72       	andi	r25, 0x20	; 32
 4d4:	69 2f       	mov	r22, r25
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	60 95       	com	r22
 4da:	70 95       	com	r23
 4dc:	60 72       	andi	r22, 0x20	; 32
 4de:	77 27       	eor	r23, r23
 4e0:	75 95       	asr	r23
 4e2:	67 95       	ror	r22
 4e4:	82 2f       	mov	r24, r18
 4e6:	86 2b       	or	r24, r22
		PORTC |= 0b11111111;
		PORTD |= 0b11111001;							//no pull-ups on USB ports PD2, PD1


		//Buttons displayed inverted in Windows GUI: LSB left, MSB right
		reportBuffer.a1 =	((1<<PINB1) & ~(PINB & (1<<PINB1))) >>1		//S1
 4e8:	80 9b       	sbis	0x10, 0	; 16
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__stack+0x91>
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <__stack+0x93>
 4f0:	40 e2       	ldi	r20, 0x20	; 32
							| ((1<<PINB0) & ~(PINB & (1<<PINB0))) <<1	//S2
							| ((1<<PIND7) & ~(PIND & (1<<PIND7))) >>5	//S3
							| ((1<<PIND6) & ~(PIND & (1<<PIND6))) >>3	//S6
							| ((1<<PIND5) & ~(PIND & (1<<PIND5))) >>1	//S5
							| ((1<<PIND0) & ~(PIND & (1<<PIND0))) <<5	//S4
							| ((1<<PINC5) & ~(PINC & (1<<PINC5))) <<1	//S9
 4f2:	33 b3       	in	r19, 0x13	; 19
							| ((1<<PINC4) & ~(PINC & (1<<PINC4))) <<3;	//S8
 4f4:	93 b3       	in	r25, 0x13	; 19
		PORTC |= 0b11111111;
		PORTD |= 0b11111001;							//no pull-ups on USB ports PD2, PD1


		//Buttons displayed inverted in Windows GUI: LSB left, MSB right
		reportBuffer.a1 =	((1<<PINB1) & ~(PINB & (1<<PINB1))) >>1		//S1
 4f6:	30 72       	andi	r19, 0x20	; 32
 4f8:	23 2f       	mov	r18, r19
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	20 95       	com	r18
 4fe:	30 95       	com	r19
 500:	20 72       	andi	r18, 0x20	; 32
 502:	33 27       	eor	r19, r19
 504:	22 0f       	add	r18, r18
 506:	33 1f       	adc	r19, r19
 508:	28 2b       	or	r18, r24
 50a:	90 71       	andi	r25, 0x10	; 16
 50c:	89 2f       	mov	r24, r25
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	80 95       	com	r24
 512:	90 95       	com	r25
 514:	80 71       	andi	r24, 0x10	; 16
 516:	99 27       	eor	r25, r25
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	82 2b       	or	r24, r18
 526:	85 2b       	or	r24, r21
 528:	48 2b       	or	r20, r24
 52a:	48 83       	st	Y, r20
							| ((1<<PIND5) & ~(PIND & (1<<PIND5))) >>1	//S5
							| ((1<<PIND0) & ~(PIND & (1<<PIND0))) <<5	//S4
							| ((1<<PINC5) & ~(PINC & (1<<PINC5))) <<1	//S9
							| ((1<<PINC4) & ~(PINC & (1<<PINC4))) <<3;	//S8

		reportBuffer.a2 =	((1<<PINC3) & ~(PINC & (1<<PINC3))) >>3		//S7
 52c:	43 b3       	in	r20, 0x13	; 19
							| ((1<<PINC2) & ~(PINC & (1<<PINC2))) >>1	//S10
 52e:	33 b3       	in	r19, 0x13	; 19
							| ((1<<PINC1) & ~(PINC & (1<<PINC1))) <<1	//S11
 530:	93 b3       	in	r25, 0x13	; 19
							| ((1<<PIND5) & ~(PIND & (1<<PIND5))) >>1	//S5
							| ((1<<PIND0) & ~(PIND & (1<<PIND0))) <<5	//S4
							| ((1<<PINC5) & ~(PINC & (1<<PINC5))) <<1	//S9
							| ((1<<PINC4) & ~(PINC & (1<<PINC4))) <<3;	//S8

		reportBuffer.a2 =	((1<<PINC3) & ~(PINC & (1<<PINC3))) >>3		//S7
 532:	48 70       	andi	r20, 0x08	; 8
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	40 95       	com	r20
 538:	50 95       	com	r21
 53a:	43 fb       	bst	r20, 3
 53c:	88 27       	eor	r24, r24
 53e:	80 f9       	bld	r24, 0
 540:	34 70       	andi	r19, 0x04	; 4
 542:	23 2f       	mov	r18, r19
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	20 95       	com	r18
 548:	30 95       	com	r19
 54a:	24 70       	andi	r18, 0x04	; 4
 54c:	33 27       	eor	r19, r19
 54e:	35 95       	asr	r19
 550:	27 95       	ror	r18
 552:	28 2b       	or	r18, r24
 554:	92 70       	andi	r25, 0x02	; 2
 556:	89 2f       	mov	r24, r25
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	80 95       	com	r24
 55c:	90 95       	com	r25
 55e:	82 70       	andi	r24, 0x02	; 2
 560:	99 27       	eor	r25, r25
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	82 2b       	or	r24, r18
 568:	98 9b       	sbis	0x13, 0	; 19
 56a:	02 c0       	rjmp	.+4      	; 0x570 <__stack+0x111>
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	01 c0       	rjmp	.+2      	; 0x572 <__stack+0x113>
 570:	9e 2d       	mov	r25, r14
 572:	89 2b       	or	r24, r25
 574:	89 83       	std	Y+1, r24	; 0x01
 576:	87 eb       	ldi	r24, 0xB7	; 183
 578:	9b e0       	ldi	r25, 0x0B	; 11
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <__stack+0x11b>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <__stack+0x121>
 580:	00 00       	nop

		_delay_ms(1);							//for debouncing

		//control pulse length for encoders
		//check for time elapsed, if so, clear buffers carrying encoder
		if (TIFR & (1<<OCF1A))						
 582:	08 b6       	in	r0, 0x38	; 56
 584:	04 fe       	sbrs	r0, 4
 586:	03 c0       	rjmp	.+6      	; 0x58e <__stack+0x12f>
		{
			TIFR |= (1<<OCF1A);					//clear timer compare flag
 588:	88 b7       	in	r24, 0x38	; 56
 58a:	80 61       	ori	r24, 0x10	; 16
 58c:	88 bf       	out	0x38, r24	; 56
		}
			 
	    DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
        wdt_reset();
 58e:	a8 95       	wdr
        usbPoll();
 590:	0e 94 f6 02 	call	0x5ec	; 0x5ec <usbPoll>
        if(usbInterruptIsReady())
 594:	f8 01       	movw	r30, r16
 596:	80 81       	ld	r24, Z
 598:	84 ff       	sbrs	r24, 4
 59a:	5f cf       	rjmp	.-322    	; 0x45a <main+0x4c>
		{
 			DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
			/* called after every poll of the interrupt endpoint */
			usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
 59c:	6c 2d       	mov	r22, r12
 59e:	ce 01       	movw	r24, r28
 5a0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <usbSetInterrupt>
 5a4:	5a cf       	rjmp	.-332    	; 0x45a <main+0x4c>

000005a6 <usbSetInterrupt>:
 5a6:	cf 93       	push	r28
 5a8:	c6 2f       	mov	r28, r22
 5aa:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <usbTxStatus1>
 5ae:	24 ff       	sbrs	r18, 4
 5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <usbSetInterrupt+0x1a>
 5b2:	e1 e7       	ldi	r30, 0x71	; 113
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	31 81       	ldd	r19, Z+1	; 0x01
 5b8:	28 e8       	ldi	r18, 0x88	; 136
 5ba:	23 27       	eor	r18, r19
 5bc:	21 83       	std	Z+1, r18	; 0x01
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <usbSetInterrupt+0x20>
 5c0:	2a e5       	ldi	r18, 0x5A	; 90
 5c2:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <usbTxStatus1>
 5c6:	e8 2f       	mov	r30, r24
 5c8:	f9 2f       	mov	r31, r25
 5ca:	a3 e7       	ldi	r26, 0x73	; 115
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	8c 2f       	mov	r24, r28
 5d0:	91 91       	ld	r25, Z+
 5d2:	9d 93       	st	X+, r25
 5d4:	81 50       	subi	r24, 0x01	; 1
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <usbSetInterrupt+0x2a>
 5d8:	6c 2f       	mov	r22, r28
 5da:	83 e7       	ldi	r24, 0x73	; 115
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 99 00 	call	0x132	; 0x132 <usbCrc16Append>
 5e2:	cc 5f       	subi	r28, 0xFC	; 252
 5e4:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <usbTxStatus1>
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <usbPoll>:
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <usbRxLen>
 5f4:	83 50       	subi	r24, 0x03	; 3
 5f6:	0a f4       	brpl	.+2      	; 0x5fa <usbPoll+0xe>
 5f8:	b5 c0       	rjmp	.+362    	; 0x764 <usbPoll+0x178>
 5fa:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <usbRxToken>
 5fe:	9d 32       	cpi	r25, 0x2D	; 45
 600:	09 f0       	breq	.+2      	; 0x604 <usbPoll+0x18>
 602:	ae c0       	rjmp	.+348    	; 0x760 <usbPoll+0x174>
 604:	88 30       	cpi	r24, 0x08	; 8
 606:	09 f0       	breq	.+2      	; 0x60a <usbPoll+0x1e>
 608:	ab c0       	rjmp	.+342    	; 0x760 <usbPoll+0x174>
 60a:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <usbInputBufOffset>
 60e:	cc e0       	ldi	r28, 0x0C	; 12
 610:	d0 e0       	ldi	r29, 0x00	; 0
 612:	c8 1b       	sub	r28, r24
 614:	d1 09       	sbc	r29, r1
 616:	ca 57       	subi	r28, 0x7A	; 122
 618:	df 4f       	sbci	r29, 0xFF	; 255
 61a:	83 ec       	ldi	r24, 0xC3	; 195
 61c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <usbTxBuf>
 620:	8a e5       	ldi	r24, 0x5A	; 90
 622:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbTxLen>
 626:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <usbMsgFlags>
 62a:	88 81       	ld	r24, Y
 62c:	80 76       	andi	r24, 0x60	; 96
 62e:	21 f0       	breq	.+8      	; 0x638 <usbPoll+0x4c>
 630:	ce 01       	movw	r24, r28
 632:	0e 94 d7 01 	call	0x3ae	; 0x3ae <usbFunctionSetup>
 636:	8b c0       	rjmp	.+278    	; 0x74e <usbPoll+0x162>
 638:	9a 81       	ldd	r25, Y+2	; 0x02
 63a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <usbTxBuf+0x9>
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	81 11       	cpse	r24, r1
 642:	06 c0       	rjmp	.+12     	; 0x650 <usbPoll+0x64>
 644:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <usbTxBuf+0xa>
 648:	2f e6       	ldi	r18, 0x6F	; 111
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	7b c0       	rjmp	.+246    	; 0x746 <usbPoll+0x15a>
 650:	85 30       	cpi	r24, 0x05	; 5
 652:	31 f4       	brne	.+12     	; 0x660 <usbPoll+0x74>
 654:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <usbNewDeviceAddr>
 658:	2f e6       	ldi	r18, 0x6F	; 111
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	73 c0       	rjmp	.+230    	; 0x746 <usbPoll+0x15a>
 660:	86 30       	cpi	r24, 0x06	; 6
 662:	09 f0       	breq	.+2      	; 0x666 <usbPoll+0x7a>
 664:	50 c0       	rjmp	.+160    	; 0x706 <usbPoll+0x11a>
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	41 f4       	brne	.+16     	; 0x67c <usbPoll+0x90>
 66c:	8d e8       	ldi	r24, 0x8D	; 141
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <usbMsgPtr+0x1>
 674:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbMsgPtr>
 678:	82 e1       	ldi	r24, 0x12	; 18
 67a:	41 c0       	rjmp	.+130    	; 0x6fe <usbPoll+0x112>
 67c:	82 30       	cpi	r24, 0x02	; 2
 67e:	41 f4       	brne	.+16     	; 0x690 <usbPoll+0xa4>
 680:	8b e6       	ldi	r24, 0x6B	; 107
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <usbMsgPtr+0x1>
 688:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbMsgPtr>
 68c:	82 e2       	ldi	r24, 0x22	; 34
 68e:	37 c0       	rjmp	.+110    	; 0x6fe <usbPoll+0x112>
 690:	83 30       	cpi	r24, 0x03	; 3
 692:	f1 f4       	brne	.+60     	; 0x6d0 <usbPoll+0xe4>
 694:	91 11       	cpse	r25, r1
 696:	08 c0       	rjmp	.+16     	; 0x6a8 <usbPoll+0xbc>
 698:	85 ec       	ldi	r24, 0xC5	; 197
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <usbMsgPtr+0x1>
 6a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbMsgPtr>
 6a4:	84 e0       	ldi	r24, 0x04	; 4
 6a6:	2b c0       	rjmp	.+86     	; 0x6fe <usbPoll+0x112>
 6a8:	91 30       	cpi	r25, 0x01	; 1
 6aa:	41 f4       	brne	.+16     	; 0x6bc <usbPoll+0xd0>
 6ac:	8d eb       	ldi	r24, 0xBD	; 189
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <usbMsgPtr+0x1>
 6b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbMsgPtr>
 6b8:	88 e0       	ldi	r24, 0x08	; 8
 6ba:	21 c0       	rjmp	.+66     	; 0x6fe <usbPoll+0x112>
 6bc:	92 30       	cpi	r25, 0x02	; 2
 6be:	e1 f4       	brne	.+56     	; 0x6f8 <usbPoll+0x10c>
 6c0:	8f e9       	ldi	r24, 0x9F	; 159
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <usbMsgPtr+0x1>
 6c8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbMsgPtr>
 6cc:	8e e1       	ldi	r24, 0x1E	; 30
 6ce:	17 c0       	rjmp	.+46     	; 0x6fe <usbPoll+0x112>
 6d0:	81 32       	cpi	r24, 0x21	; 33
 6d2:	41 f4       	brne	.+16     	; 0x6e4 <usbPoll+0xf8>
 6d4:	8d e7       	ldi	r24, 0x7D	; 125
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <usbMsgPtr+0x1>
 6dc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbMsgPtr>
 6e0:	89 e0       	ldi	r24, 0x09	; 9
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <usbPoll+0x112>
 6e4:	82 32       	cpi	r24, 0x22	; 34
 6e6:	51 f4       	brne	.+20     	; 0x6fc <usbPoll+0x110>
 6e8:	84 e5       	ldi	r24, 0x54	; 84
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <usbMsgPtr+0x1>
 6f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbMsgPtr>
 6f4:	87 e1       	ldi	r24, 0x17	; 23
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <usbPoll+0x112>
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <usbPoll+0x112>
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e4       	ldi	r25, 0x40	; 64
 700:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <usbMsgFlags>
 704:	24 c0       	rjmp	.+72     	; 0x74e <usbPoll+0x162>
 706:	88 30       	cpi	r24, 0x08	; 8
 708:	99 f0       	breq	.+38     	; 0x730 <usbPoll+0x144>
 70a:	89 30       	cpi	r24, 0x09	; 9
 70c:	31 f4       	brne	.+12     	; 0x71a <usbPoll+0x12e>
 70e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <usbConfiguration>
 712:	2f e6       	ldi	r18, 0x6F	; 111
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	16 c0       	rjmp	.+44     	; 0x746 <usbPoll+0x15a>
 71a:	8a 30       	cpi	r24, 0x0A	; 10
 71c:	69 f0       	breq	.+26     	; 0x738 <usbPoll+0x14c>
 71e:	8b 30       	cpi	r24, 0x0B	; 11
 720:	79 f4       	brne	.+30     	; 0x740 <usbPoll+0x154>
 722:	8b e4       	ldi	r24, 0x4B	; 75
 724:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <usbTxStatus1+0x1>
 728:	2f e6       	ldi	r18, 0x6F	; 111
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	0b c0       	rjmp	.+22     	; 0x746 <usbPoll+0x15a>
 730:	25 e8       	ldi	r18, 0x85	; 133
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	07 c0       	rjmp	.+14     	; 0x746 <usbPoll+0x15a>
 738:	2f e6       	ldi	r18, 0x6F	; 111
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	03 c0       	rjmp	.+6      	; 0x746 <usbPoll+0x15a>
 740:	2f e6       	ldi	r18, 0x6F	; 111
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <usbMsgPtr+0x1>
 74a:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <usbMsgPtr>
 74e:	9f 81       	ldd	r25, Y+7	; 0x07
 750:	91 11       	cpse	r25, r1
 752:	04 c0       	rjmp	.+8      	; 0x75c <usbPoll+0x170>
 754:	9e 81       	ldd	r25, Y+6	; 0x06
 756:	98 17       	cp	r25, r24
 758:	08 f4       	brcc	.+2      	; 0x75c <usbPoll+0x170>
 75a:	89 2f       	mov	r24, r25
 75c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 760:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <usbRxLen>
 764:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <usbTxLen>
 768:	84 ff       	sbrs	r24, 4
 76a:	4c c0       	rjmp	.+152    	; 0x804 <usbPoll+0x218>
 76c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 770:	8f 3f       	cpi	r24, 0xFF	; 255
 772:	09 f4       	brne	.+2      	; 0x776 <usbPoll+0x18a>
 774:	47 c0       	rjmp	.+142    	; 0x804 <usbPoll+0x218>
 776:	c8 2f       	mov	r28, r24
 778:	89 30       	cpi	r24, 0x09	; 9
 77a:	08 f0       	brcs	.+2      	; 0x77e <usbPoll+0x192>
 77c:	c8 e0       	ldi	r28, 0x08	; 8
 77e:	8c 1b       	sub	r24, r28
 780:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 784:	e6 e6       	ldi	r30, 0x66	; 102
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	90 81       	ld	r25, Z
 78a:	88 e8       	ldi	r24, 0x88	; 136
 78c:	89 27       	eor	r24, r25
 78e:	80 83       	st	Z, r24
 790:	cc 23       	and	r28, r28
 792:	09 f4       	brne	.+2      	; 0x796 <usbPoll+0x1aa>
 794:	45 c0       	rjmp	.+138    	; 0x820 <usbPoll+0x234>
 796:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <usbMsgPtr>
 79a:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <usbMsgPtr+0x1>
 79e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <usbMsgFlags>
 7a2:	86 ff       	sbrs	r24, 6
 7a4:	10 c0       	rjmp	.+32     	; 0x7c6 <usbPoll+0x1da>
 7a6:	a7 e6       	ldi	r26, 0x67	; 103
 7a8:	b0 e0       	ldi	r27, 0x00	; 0
 7aa:	f9 01       	movw	r30, r18
 7ac:	8c 2f       	mov	r24, r28
 7ae:	94 91       	lpm	r25, Z
 7b0:	9d 93       	st	X+, r25
 7b2:	31 96       	adiw	r30, 0x01	; 1
 7b4:	81 50       	subi	r24, 0x01	; 1
 7b6:	d9 f7       	brne	.-10     	; 0x7ae <usbPoll+0x1c2>
 7b8:	2f 5f       	subi	r18, 0xFF	; 255
 7ba:	3f 4f       	sbci	r19, 0xFF	; 255
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	8c 0f       	add	r24, r28
 7c0:	28 0f       	add	r18, r24
 7c2:	31 1d       	adc	r19, r1
 7c4:	0e c0       	rjmp	.+28     	; 0x7e2 <usbPoll+0x1f6>
 7c6:	a7 e6       	ldi	r26, 0x67	; 103
 7c8:	b0 e0       	ldi	r27, 0x00	; 0
 7ca:	f9 01       	movw	r30, r18
 7cc:	8c 2f       	mov	r24, r28
 7ce:	91 91       	ld	r25, Z+
 7d0:	9d 93       	st	X+, r25
 7d2:	81 50       	subi	r24, 0x01	; 1
 7d4:	e1 f7       	brne	.-8      	; 0x7ce <usbPoll+0x1e2>
 7d6:	2f 5f       	subi	r18, 0xFF	; 255
 7d8:	3f 4f       	sbci	r19, 0xFF	; 255
 7da:	8f ef       	ldi	r24, 0xFF	; 255
 7dc:	8c 0f       	add	r24, r28
 7de:	28 0f       	add	r18, r24
 7e0:	31 1d       	adc	r19, r1
 7e2:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <usbMsgPtr+0x1>
 7e6:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <usbMsgPtr>
 7ea:	6c 2f       	mov	r22, r28
 7ec:	87 e6       	ldi	r24, 0x67	; 103
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 99 00 	call	0x132	; 0x132 <usbCrc16Append>
 7f4:	cc 5f       	subi	r28, 0xFC	; 252
 7f6:	cc 30       	cpi	r28, 0x0C	; 12
 7f8:	18 f4       	brcc	.+6      	; 0x800 <usbPoll+0x214>
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 800:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <usbTxLen>
 804:	80 b3       	in	r24, 0x10	; 16
 806:	86 70       	andi	r24, 0x06	; 6
 808:	91 f4       	brne	.+36     	; 0x82e <usbPoll+0x242>
 80a:	93 e1       	ldi	r25, 0x13	; 19
 80c:	80 b3       	in	r24, 0x10	; 16
 80e:	86 70       	andi	r24, 0x06	; 6
 810:	71 f4       	brne	.+28     	; 0x82e <usbPoll+0x242>
 812:	91 50       	subi	r25, 0x01	; 1
 814:	d9 f7       	brne	.-10     	; 0x80c <usbPoll+0x220>
 816:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <usbNewDeviceAddr>
 81a:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <usbDeviceAddr>
 81e:	07 c0       	rjmp	.+14     	; 0x82e <usbPoll+0x242>
 820:	6c 2f       	mov	r22, r28
 822:	87 e6       	ldi	r24, 0x67	; 103
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 99 00 	call	0x132	; 0x132 <usbCrc16Append>
 82a:	cc 5f       	subi	r28, 0xFC	; 252
 82c:	e6 cf       	rjmp	.-52     	; 0x7fa <usbPoll+0x20e>
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <usbInit>:
 834:	85 b7       	in	r24, 0x35	; 53
 836:	82 60       	ori	r24, 0x02	; 2
 838:	85 bf       	out	0x35, r24	; 53
 83a:	8b b7       	in	r24, 0x3b	; 59
 83c:	80 64       	ori	r24, 0x40	; 64
 83e:	8b bf       	out	0x3b, r24	; 59
 840:	e1 e7       	ldi	r30, 0x71	; 113
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	8b e4       	ldi	r24, 0x4B	; 75
 846:	81 83       	std	Z+1, r24	; 0x01
 848:	8a e5       	ldi	r24, 0x5A	; 90
 84a:	80 83       	st	Z, r24
 84c:	08 95       	ret

0000084e <_exit>:
 84e:	f8 94       	cli

00000850 <__stop_program>:
 850:	ff cf       	rjmp	.-2      	; 0x850 <__stop_program>
